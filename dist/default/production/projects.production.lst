

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Sep 13 15:21:32 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40   000000                     
    41                           ; Generated 12/10/2023 GMT
    42                           ; 
    43                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F46K20 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75   000000                     
    76                           	psect	idataCOMRAM
    77   001418                     __pidataCOMRAM:
    78                           	callstack 0
    79                           
    80                           ;initializer for _lat_registers
    81   001418  89                 	db	137
    82   001419  0F                 	db	15
    83   00141A  8A                 	db	138
    84   00141B  0F                 	db	15
    85   00141C  8B                 	db	139
    86   00141D  0F                 	db	15
    87   00141E  8C                 	db	140
    88   00141F  0F                 	db	15
    89   001420  8D                 	db	141
    90   001421  0F                 	db	15
    91                           
    92                           ;initializer for _tris_registers
    93   001422  92                 	db	146
    94   001423  0F                 	db	15
    95   001424  93                 	db	147
    96   001425  0F                 	db	15
    97   001426  94                 	db	148
    98   001427  0F                 	db	15
    99   001428  95                 	db	149
   100   001429  0F                 	db	15
   101   00142A  96                 	db	150
   102   00142B  0F                 	db	15
   103                           
   104                           ;initializer for _RB7_Flag
   105   00142C  01                 	db	1
   106                           
   107                           ;initializer for _RB6_Flag
   108   00142D  01                 	db	1
   109                           
   110                           ;initializer for _RB5_Flag
   111   00142E  01                 	db	1
   112                           
   113                           ;initializer for _RB4_Flag
   114   00142F  01                 	db	1
   115                           
   116                           ;initializer for _adc_1
   117   001430  BC                 	db	low _ADC_DefaultInterruptHandler
   118   001431  14                 	db	high _ADC_DefaultInterruptHandler
   119   001432  00                 	db	0
   120   001433  05                 	db	5
   121   001434  05                 	db	5
   122   001435  00                 	db	0
   123   001436  02                 	db	2
   124                           
   125                           	psect	idataBANK0
   126   0014DE                     __pidataBANK0:
   127                           	callstack 0
   128                           
   129                           ;initializer for _port_registers
   130   0014DE  80                 	db	128
   131   0014DF  0F                 	db	15
   132   0014E0  81                 	db	129
   133   0014E1  0F                 	db	15
   134   0014E2  82                 	db	130
   135   0014E3  0F                 	db	15
   136   0014E4  83                 	db	131
   137   0014E5  0F                 	db	15
   138   0014E6  84                 	db	132
   139   0014E7  0F                 	db	15
   140                           
   141                           	psect	smallconst
   142   001000                     __psmallconst:
   143                           	callstack 0
   144   001000  00                 	db	0
   145   001001                     _btn_values:
   146                           	callstack 0
   147   001001  37                 	db	55
   148   001002  38                 	db	56
   149   001003  39                 	db	57
   150   001004  2F                 	db	47
   151   001005  34                 	db	52
   152   001006  35                 	db	53
   153   001007  36                 	db	54
   154   001008  37                 	db	55
   155   001009  31                 	db	49
   156   00100A  32                 	db	50
   157   00100B  33                 	db	51
   158   00100C  34                 	db	52
   159   00100D  23                 	db	35
   160   00100E  30                 	db	48
   161   00100F  3D                 	db	61
   162   001010  2B                 	db	43
   163   001011                     __end_of_btn_values:
   164                           	callstack 0
   165   000000                     _ADCON1bits	set	4033
   166   000000                     _ADRESL	set	4035
   167   000000                     _ADRESH	set	4036
   168   000000                     _INTCON2bits	set	4081
   169   000000                     _EECON2	set	4007
   170   001011                     STR_1:
   171   001011  25                 	db	37
   172   001012  69                 	db	105	;'i'
   173   001013  00                 	db	0
   174   001014  00                 	db	0	; dummy byte at the end
   175   000000                     
   176                           	psect	nvCOMRAM
   177   000054                     __pnvCOMRAM:
   178                           	callstack 0
   179   000054                     _ret:
   180                           	callstack 0
   181   000054                     	ds	1
   182   000000                     _PORTBbits	set	3969
   183   000000                     _EECON1bits	set	4006
   184   000000                     _EEDATA	set	4008
   185   000000                     _EEADR	set	4009
   186   000000                     _EEADRH	set	4010
   187   000000                     _INTCONbits	set	4082
   188   000000                     _PORTA	set	3968
   189   000000                     _LATA	set	3977
   190   000000                     _TRISA	set	3986
   191   000000                     _ADCON2bits	set	4032
   192   000000                     _ADCON0bits	set	4034
   193   000000                     _INTCON3bits	set	4080
   194   000000                     _PIE1bits	set	3997
   195   000000                     _TRISE	set	3990
   196   000000                     _TRISD	set	3989
   197   000000                     _TRISC	set	3988
   198   000000                     _TRISB	set	3987
   199   000000                     _LATE	set	3981
   200   000000                     _LATD	set	3980
   201   000000                     _LATC	set	3979
   202   000000                     _LATB	set	3978
   203   000000                     _PORTE	set	3972
   204   000000                     _PORTD	set	3971
   205   000000                     _PORTC	set	3970
   206   000000                     _PORTB	set	3969
   207   000000                     _PIR1bits	set	3998
   208                           
   209                           ; #config settings
   210                           
   211                           	psect	cinit
   212   0012B0                     __pcinit:
   213                           	callstack 0
   214   0012B0                     start_initialization:
   215                           	callstack 0
   216   0012B0                     __initialization:
   217                           	callstack 0
   218                           
   219                           ; Initialize objects allocated to BANK0 (10 bytes)
   220                           ; load TBLPTR registers with __pidataBANK0
   221   0012B0  0EDE               	movlw	low __pidataBANK0
   222   0012B2  6EF6               	movwf	tblptrl,c
   223   0012B4  0E14               	movlw	high __pidataBANK0
   224   0012B6  6EF7               	movwf	tblptrh,c
   225   0012B8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   226   0012BA  6EF8               	movwf	tblptru,c
   227   0012BC  EE00  F060         	lfsr	0,__pdataBANK0
   228   0012C0  EE10 F00A          	lfsr	1,10
   229   0012C4                     copy_data0:
   230   0012C4  0009               	tblrd		*+
   231   0012C6  CFF5 FFEE          	movff	tablat,postinc0
   232   0012CA  50E5               	movf	postdec1,w,c
   233   0012CC  50E1               	movf	fsr1l,w,c
   234   0012CE  E1FA               	bnz	copy_data0
   235                           
   236                           ; Initialize objects allocated to COMRAM (31 bytes)
   237                           ; load TBLPTR registers with __pidataCOMRAM
   238   0012D0  0E18               	movlw	low __pidataCOMRAM
   239   0012D2  6EF6               	movwf	tblptrl,c
   240   0012D4  0E14               	movlw	high __pidataCOMRAM
   241   0012D6  6EF7               	movwf	tblptrh,c
   242   0012D8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   243   0012DA  6EF8               	movwf	tblptru,c
   244   0012DC  EE00  F023         	lfsr	0,__pdataCOMRAM
   245   0012E0  EE10 F01F          	lfsr	1,31
   246   0012E4                     copy_data1:
   247   0012E4  0009               	tblrd		*+
   248   0012E6  CFF5 FFEE          	movff	tablat,postinc0
   249   0012EA  50E5               	movf	postdec1,w,c
   250   0012EC  50E1               	movf	fsr1l,w,c
   251   0012EE  E1FA               	bnz	copy_data1
   252                           
   253                           ; Clear objects allocated to COMRAM (34 bytes)
   254   0012F0  EE00  F001         	lfsr	0,__pbssCOMRAM
   255   0012F4  0E22               	movlw	34
   256   0012F6                     clear_0:
   257   0012F6  6AEE               	clrf	postinc0,c
   258   0012F8  06E8               	decf	wreg,f,c
   259   0012FA  E1FD               	bnz	clear_0
   260   0012FC                     end_of_initialization:
   261                           	callstack 0
   262   0012FC                     __end_of__initialization:
   263                           	callstack 0
   264   0012FC  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   265   0012FE  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   266   001300  0100               	movlb	0
   267   001302  EF1C  F00A         	goto	_main	;jump to C main() function
   268                           
   269                           	psect	bssCOMRAM
   270   000001                     __pbssCOMRAM:
   271                           	callstack 0
   272   000001                     _ADC_InterruptHandler:
   273                           	callstack 0
   274   000001                     	ds	2
   275   000003                     _RB7_InterruptHandler_LOW:
   276                           	callstack 0
   277   000003                     	ds	2
   278   000005                     _RB7_InterruptHandler_HIGH:
   279                           	callstack 0
   280   000005                     	ds	2
   281   000007                     _RB6_InterruptHandler_LOW:
   282                           	callstack 0
   283   000007                     	ds	2
   284   000009                     _RB6_InterruptHandler_HIGH:
   285                           	callstack 0
   286   000009                     	ds	2
   287   00000B                     _RB5_InterruptHandler_LOW:
   288                           	callstack 0
   289   00000B                     	ds	2
   290   00000D                     _RB5_InterruptHandler_HIGH:
   291                           	callstack 0
   292   00000D                     	ds	2
   293   00000F                     _RB4_InterruptHandler_LOW:
   294                           	callstack 0
   295   00000F                     	ds	2
   296   000011                     _RB4_InterruptHandler_HIGH:
   297                           	callstack 0
   298   000011                     	ds	2
   299   000013                     _INT2_InterruptHandler:
   300                           	callstack 0
   301   000013                     	ds	2
   302   000015                     _INT1_InterruptHandler:
   303                           	callstack 0
   304   000015                     	ds	2
   305   000017                     _INT0_InterruptHandler:
   306                           	callstack 0
   307   000017                     	ds	2
   308   000019                     _adc_flag:
   309                           	callstack 0
   310   000019                     	ds	1
   311   00001A                     relay_turn_off@F3314:
   312                           	callstack 0
   313   00001A                     	ds	1
   314   00001B                     relay_turn_on@F3309:
   315                           	callstack 0
   316   00001B                     	ds	1
   317   00001C                     relay_initialize@F3304:
   318                           	callstack 0
   319   00001C                     	ds	1
   320   00001D                     led_turn_toggle@F3325:
   321                           	callstack 0
   322   00001D                     	ds	1
   323   00001E                     led_turn_off@F3320:
   324                           	callstack 0
   325   00001E                     	ds	1
   326   00001F                     led_turn_on@F3315:
   327                           	callstack 0
   328   00001F                     	ds	1
   329   000020                     led_initialize@F3310:
   330                           	callstack 0
   331   000020                     	ds	1
   332   000021                     _res_1:
   333                           	callstack 0
   334   000021                     	ds	2
   335                           
   336                           	psect	dataCOMRAM
   337   000023                     __pdataCOMRAM:
   338                           	callstack 0
   339   000023                     _lat_registers:
   340                           	callstack 0
   341   000023                     	ds	10
   342   00002D                     _tris_registers:
   343                           	callstack 0
   344   00002D                     	ds	10
   345   000037                     _RB7_Flag:
   346                           	callstack 0
   347   000037                     	ds	1
   348   000038                     _RB6_Flag:
   349                           	callstack 0
   350   000038                     	ds	1
   351   000039                     _RB5_Flag:
   352                           	callstack 0
   353   000039                     	ds	1
   354   00003A                     _RB4_Flag:
   355                           	callstack 0
   356   00003A                     	ds	1
   357   00003B                     _adc_1:
   358                           	callstack 0
   359   00003B                     	ds	7
   360                           
   361                           	psect	dataBANK0
   362   000060                     __pdataBANK0:
   363                           	callstack 0
   364   000060                     _port_registers:
   365                           	callstack 0
   366   000060                     	ds	10
   367                           
   368                           	psect	cstackBANK0
   369   00006A                     __pcstackBANK0:
   370                           	callstack 0
   371   00006A                     ADC_GetConversion_Interrupt@_adc:
   372                           	callstack 0
   373                           
   374                           ; 1 bytes @ 0x0
   375   00006A                     	ds	1
   376   00006B                     ADC_GetConversion_Interrupt@channel:
   377                           	callstack 0
   378                           
   379                           ; 1 bytes @ 0x1
   380   00006B                     	ds	1
   381                           
   382                           	psect	cstackCOMRAM
   383   000042                     __pcstackCOMRAM:
   384                           	callstack 0
   385   000042                     RB4_ISR@RB4_source:
   386                           	callstack 0
   387   000042                     RB5_ISR@RB5_source:
   388                           	callstack 0
   389   000042                     RB6_ISR@RB6_source:
   390                           	callstack 0
   391   000042                     RB7_ISR@RB7_source:
   392                           	callstack 0
   393   000042                     ADC_GetConversionResult@_adc:
   394                           	callstack 0
   395                           
   396                           ; 1 bytes @ 0x0
   397   000042                     	ds	1
   398   000043                     ADC_GetConversionResult@conversion_result:
   399                           	callstack 0
   400                           
   401                           ; 1 bytes @ 0x1
   402   000043                     	ds	1
   403   000044                     ??_ADC_GetConversionResult:
   404                           
   405                           ; 1 bytes @ 0x2
   406   000044                     	ds	3
   407   000047                     ADC_GetConversionResult@ret:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x5
   411   000047                     	ds	1
   412   000048                     ??_InterruptManager:
   413                           
   414                           ; 1 bytes @ 0x6
   415   000048                     	ds	4
   416   00004C                     ??_adc_input_channel_port_configure:
   417   00004C                     ADC_StartConversion@_adc:
   418                           	callstack 0
   419   00004C                     select_result_format@_adc:
   420                           	callstack 0
   421   00004C                     configure_voltage_reference@_adc:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0xA
   425   00004C                     	ds	1
   426   00004D                     ADC_StartConversion@ret:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0xB
   430   00004D                     	ds	1
   431   00004E                     adc_input_channel_port_configure@channel:
   432                           	callstack 0
   433                           
   434                           ; 1 bytes @ 0xC
   435   00004E                     	ds	1
   436   00004F                     ADC_Init@_adc:
   437                           	callstack 0
   438   00004F                     ADC_SelectChannel@_adc:
   439                           	callstack 0
   440                           
   441                           ; 1 bytes @ 0xD
   442   00004F                     	ds	1
   443   000050                     ??_ADC_Init:
   444   000050                     ADC_SelectChannel@channel:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0xE
   448   000050                     	ds	1
   449   000051                     ??_ADC_SelectChannel:
   450   000051                     ADC_Init@ret:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0xF
   454   000051                     	ds	1
   455   000052                     ADC_SelectChannel@ret:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0x10
   459   000052                     	ds	1
   460   000053                     ADC_GetConversion_Interrupt@ret:
   461                           	callstack 0
   462                           
   463                           ; 1 bytes @ 0x11
   464   000053                     	ds	1
   465   000054                     
   466                           ; 1 bytes @ 0x12
   467 ;;
   468 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   469 ;;
   470 ;; *************** function _main *****************
   471 ;; Defined at:
   472 ;;		line 34 in file "application.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  2  779[None  ] int 
   479 ;; Registers used:
   480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;Total ram usage:        0 bytes
   491 ;; Hardware stack levels required when called: 7
   492 ;; This function calls:
   493 ;;		_ADC_GetConversion_Interrupt
   494 ;;		_Application
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text0
   501   001438                     __ptext0:
   502                           	callstack 0
   503   001438                     _main:
   504                           	callstack 24
   505   001438                     
   506                           ;application.c: 36:     Application ();
   507   001438  EC67  F00A         	call	_Application	;wreg free
   508   00143C                     l3431:
   509                           
   510                           ;application.c: 38:     {;application.c: 39:         ret = ADC_GetConversion_Interrupt (
      +                          &adc_1, ADC_CHANNEL_AN0);
   511   00143C  0E3B               	movlw	low _adc_1
   512   00143E  0100               	movlb	0	; () banked
   513   001440  6F6A               	movwf	ADC_GetConversion_Interrupt@_adc& (0+255),b
   514   001442  0E00               	movlw	0
   515   001444  6F6B               	movwf	ADC_GetConversion_Interrupt@channel& (0+255),b
   516   001446  ECC9  F009         	call	_ADC_GetConversion_Interrupt	;wreg free
   517   00144A  6E54               	movwf	_ret^0,c
   518   00144C  EF1E  F00A         	goto	l3431
   519   001450  EF67  F001         	goto	start
   520   001454                     __end_of_main:
   521                           	callstack 0
   522                           
   523 ;; *************** function _Application *****************
   524 ;; Defined at:
   525 ;;		line 44 in file "application.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels used: 1
   545 ;; Hardware stack levels required when called: 6
   546 ;; This function calls:
   547 ;;		_ADC_Init
   548 ;;		_ecu_layer_initialize
   549 ;; This function is called by:
   550 ;;		_main
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text1
   555   0014CE                     __ptext1:
   556                           	callstack 0
   557   0014CE                     _Application:
   558                           	callstack 24
   559   0014CE                     
   560                           ;application.c: 46:     ret = ADC_Init(&adc_1);
   561   0014CE  0E3B               	movlw	low _adc_1
   562   0014D0  6E4F               	movwf	ADC_Init@_adc^0,c
   563   0014D2  ECD5  F008         	call	_ADC_Init	;wreg free
   564   0014D6  6E54               	movwf	_ret^0,c
   565   0014D8                     
   566                           ;application.c: 47:     ecu_layer_initialize();
   567   0014D8  EC7A  F00A         	call	_ecu_layer_initialize	;wreg free
   568   0014DC  0012               	return		;funcret
   569   0014DE                     __end_of_Application:
   570                           	callstack 0
   571                           
   572 ;; *************** function _ecu_layer_initialize *****************
   573 ;; Defined at:
   574 ;;		line 12 in file "ECU_Layer/ecu_layer_init.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		None
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used: 1
   594 ;; Hardware stack levels required when called: 4
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_Application
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text2
   603   0014F4                     __ptext2:
   604                           	callstack 0
   605   0014F4                     _ecu_layer_initialize:
   606                           	callstack 25
   607   0014F4  0012               	return		;funcret
   608   0014F6                     __end_of_ecu_layer_initialize:
   609                           	callstack 0
   610                           
   611 ;; *************** function _ADC_Init *****************
   612 ;; Defined at:
   613 ;;		line 29 in file "MCAL_Layer/ADC/hal_adc.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;  _adc            1   13[COMRAM] PTR const struct .
   616 ;;		 -> adc_1(7), 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;  ret             1   15[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      unsigned char 
   621 ;; Registers used:
   622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   628 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   631 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   632 ;;Total ram usage:        3 bytes
   633 ;; Hardware stack levels used: 1
   634 ;; Hardware stack levels required when called: 5
   635 ;; This function calls:
   636 ;;		_adc_input_channel_port_configure
   637 ;;		_configure_voltage_reference
   638 ;;		_select_result_format
   639 ;; This function is called by:
   640 ;;		_Application
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text3
   645   0011AA                     __ptext3:
   646                           	callstack 0
   647   0011AA                     _ADC_Init:
   648                           	callstack 24
   649   0011AA                     
   650                           ;MCAL_Layer/ADC/hal_adc.c: 30:     Std_ReturnType ret = (Std_ReturnType)0x01;
   651   0011AA  0E01               	movlw	1
   652   0011AC  6E51               	movwf	ADC_Init@ret^0,c
   653                           
   654                           ;MCAL_Layer/ADC/hal_adc.c: 31:     if (((void*)0) == _adc)
   655   0011AE  504F               	movf	ADC_Init@_adc^0,w,c
   656   0011B0  A4D8               	btfss	status,2,c
   657   0011B2  EFDD  F008         	goto	u2071
   658   0011B6  EFDF  F008         	goto	u2070
   659   0011BA                     u2071:
   660   0011BA  EFE3  F008         	goto	l819
   661   0011BE                     u2070:
   662   0011BE                     
   663                           ;MCAL_Layer/ADC/hal_adc.c: 32:     {;MCAL_Layer/ADC/hal_adc.c: 33:         ret = (Std_Re
      +                          turnType)0x00;
   664   0011BE  0E00               	movlw	0
   665   0011C0  6E51               	movwf	ADC_Init@ret^0,c
   666                           
   667                           ;MCAL_Layer/ADC/hal_adc.c: 34:     }
   668   0011C2  EF29  F009         	goto	l3161
   669   0011C6                     l819:
   670                           
   671                           ;MCAL_Layer/ADC/hal_adc.c: 36:     {;MCAL_Layer/ADC/hal_adc.c: 38:         (ADCON0bits.A
      +                          DON = 0);
   672   0011C6  90C2               	bcf	194,0,c	;volatile
   673   0011C8                     
   674                           ;MCAL_Layer/ADC/hal_adc.c: 40:         ADCON2bits.ACQT = _adc->Acquisition_time;
   675   0011C8  504F               	movf	ADC_Init@_adc^0,w,c
   676   0011CA  6ED9               	movwf	fsr2l,c
   677   0011CC  6ADA               	clrf	fsr2h,c
   678   0011CE  0E03               	movlw	3
   679   0011D0  26D9               	addwf	fsr2l,f,c
   680   0011D2  50DF               	movf	indf2,w,c
   681   0011D4  6E50               	movwf	??_ADC_Init^0,c
   682   0011D6  4650               	rlncf	??_ADC_Init^0,f,c
   683   0011D8  4650               	rlncf	??_ADC_Init^0,f,c
   684   0011DA  4650               	rlncf	??_ADC_Init^0,f,c
   685   0011DC  50C0               	movf	192,w,c	;volatile
   686   0011DE  1850               	xorwf	??_ADC_Init^0,w,c
   687   0011E0  0BC7               	andlw	-57
   688   0011E2  1850               	xorwf	??_ADC_Init^0,w,c
   689   0011E4  6EC0               	movwf	192,c	;volatile
   690                           
   691                           ;MCAL_Layer/ADC/hal_adc.c: 42:         ADCON2bits.ADCS = _adc->convertion_clock;
   692   0011E6  504F               	movf	ADC_Init@_adc^0,w,c
   693   0011E8  6ED9               	movwf	fsr2l,c
   694   0011EA  6ADA               	clrf	fsr2h,c
   695   0011EC  0E04               	movlw	4
   696   0011EE  26D9               	addwf	fsr2l,f,c
   697   0011F0  50DF               	movf	indf2,w,c
   698   0011F2  6E50               	movwf	??_ADC_Init^0,c
   699   0011F4  50C0               	movf	192,w,c	;volatile
   700   0011F6  1850               	xorwf	??_ADC_Init^0,w,c
   701   0011F8  0BF8               	andlw	-8
   702   0011FA  1850               	xorwf	??_ADC_Init^0,w,c
   703   0011FC  6EC0               	movwf	192,c	;volatile
   704                           
   705                           ;MCAL_Layer/ADC/hal_adc.c: 44:         ADCON0bits.CHS = _adc->adc_channel;
   706   0011FE  504F               	movf	ADC_Init@_adc^0,w,c
   707   001200  6ED9               	movwf	fsr2l,c
   708   001202  6ADA               	clrf	fsr2h,c
   709   001204  0E05               	movlw	5
   710   001206  26D9               	addwf	fsr2l,f,c
   711   001208  50DF               	movf	indf2,w,c
   712   00120A  6E50               	movwf	??_ADC_Init^0,c
   713   00120C  4650               	rlncf	??_ADC_Init^0,f,c
   714   00120E  4650               	rlncf	??_ADC_Init^0,f,c
   715   001210  50C2               	movf	194,w,c	;volatile
   716   001212  1850               	xorwf	??_ADC_Init^0,w,c
   717   001214  0BC3               	andlw	-61
   718   001216  1850               	xorwf	??_ADC_Init^0,w,c
   719   001218  6EC2               	movwf	194,c	;volatile
   720   00121A                     
   721                           ;MCAL_Layer/ADC/hal_adc.c: 45:         adc_input_channel_port_configure(_adc->adc_channe
      +                          l);
   722   00121A  504F               	movf	ADC_Init@_adc^0,w,c
   723   00121C  6ED9               	movwf	fsr2l,c
   724   00121E  6ADA               	clrf	fsr2h,c
   725   001220  0E05               	movlw	5
   726   001222  26D9               	addwf	fsr2l,f,c
   727   001224  50DF               	movf	indf2,w,c
   728   001226  EC0B  F008         	call	_adc_input_channel_port_configure
   729   00122A                     
   730                           ;MCAL_Layer/ADC/hal_adc.c: 48:         (INTCONbits.GIE = 1);
   731   00122A  8EF2               	bsf	242,7,c	;volatile
   732   00122C                     
   733                           ;MCAL_Layer/ADC/hal_adc.c: 49:         (INTCONbits.PEIE = 1);
   734   00122C  8CF2               	bsf	242,6,c	;volatile
   735   00122E                     
   736                           ;MCAL_Layer/ADC/hal_adc.c: 50:         (PIE1bits.ADIE = 1);
   737   00122E  8C9D               	bsf	157,6,c	;volatile
   738   001230                     
   739                           ;MCAL_Layer/ADC/hal_adc.c: 51:         (PIR1bits.ADIF = 0);
   740   001230  9C9E               	bcf	158,6,c	;volatile
   741   001232                     
   742                           ;MCAL_Layer/ADC/hal_adc.c: 57:         ADC_InterruptHandler = _adc->ADC_InterruptHandler
      +                          ;
   743   001232  504F               	movf	ADC_Init@_adc^0,w,c
   744   001234  6ED9               	movwf	fsr2l,c
   745   001236  6ADA               	clrf	fsr2h,c
   746   001238  CFDE F001          	movff	postinc2,_ADC_InterruptHandler
   747   00123C  CFDD F002          	movff	postdec2,_ADC_InterruptHandler+1
   748   001240                     
   749                           ;MCAL_Layer/ADC/hal_adc.c: 60:         select_result_format(_adc);
   750   001240  C04F  F04C         	movff	ADC_Init@_adc,select_result_format@_adc
   751   001244  EC83  F009         	call	_select_result_format	;wreg free
   752   001248                     
   753                           ;MCAL_Layer/ADC/hal_adc.c: 62:         configure_voltage_reference(_adc);
   754   001248  C04F  F04C         	movff	ADC_Init@_adc,configure_voltage_reference@_adc
   755   00124C  EC2B  F009         	call	_configure_voltage_reference	;wreg free
   756   001250                     
   757                           ;MCAL_Layer/ADC/hal_adc.c: 64:         (ADCON0bits.ADON = 1);
   758   001250  80C2               	bsf	194,0,c	;volatile
   759   001252                     l3161:
   760                           
   761                           ;MCAL_Layer/ADC/hal_adc.c: 66:     return ret;
   762   001252  5051               	movf	ADC_Init@ret^0,w,c
   763   001254  0012               	return		;funcret
   764   001256                     __end_of_ADC_Init:
   765                           	callstack 0
   766                           
   767 ;; *************** function _select_result_format *****************
   768 ;; Defined at:
   769 ;;		line 270 in file "MCAL_Layer/ADC/hal_adc.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  _adc            1   10[COMRAM] PTR const struct .
   772 ;;		 -> adc_1(7), 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  ret             1    0        unsigned char 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      unsigned char 
   777 ;; Registers used:
   778 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   784 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;Total ram usage:        1 bytes
   789 ;; Hardware stack levels used: 1
   790 ;; Hardware stack levels required when called: 4
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_ADC_Init
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text4
   799   001306                     __ptext4:
   800                           	callstack 0
   801   001306                     _select_result_format:
   802                           	callstack 24
   803   001306                     
   804                           ;MCAL_Layer/ADC/hal_adc.c: 272:     if (((void*)0) == _adc)
   805   001306  504C               	movf	select_result_format@_adc^0,w,c
   806   001308  A4D8               	btfss	status,2,c
   807   00130A  EF89  F009         	goto	u2011
   808   00130E  EF8B  F009         	goto	u2010
   809   001312                     u2011:
   810   001312  EF8D  F009         	goto	l3117
   811   001316                     u2010:
   812   001316                     
   813                           ;MCAL_Layer/ADC/hal_adc.c: 275:     }
   814   001316  EFAC  F009         	goto	l897
   815   00131A                     l3117:
   816                           
   817                           ;MCAL_Layer/ADC/hal_adc.c: 277:     {;MCAL_Layer/ADC/hal_adc.c: 278:         if (0X01U =
      +                          = _adc->result_format)
   818   00131A  504C               	movf	select_result_format@_adc^0,w,c
   819   00131C  6ED9               	movwf	fsr2l,c
   820   00131E  6ADA               	clrf	fsr2h,c
   821   001320  0E06               	movlw	6
   822   001322  26D9               	addwf	fsr2l,f,c
   823   001324  A2DF               	btfss	indf2,1,c
   824   001326  EF97  F009         	goto	u2021
   825   00132A  EF99  F009         	goto	u2020
   826   00132E                     u2021:
   827   00132E  EF9C  F009         	goto	l3121
   828   001332                     u2020:
   829   001332                     
   830                           ;MCAL_Layer/ADC/hal_adc.c: 279:         {;MCAL_Layer/ADC/hal_adc.c: 280:             (AD
      +                          CON2bits.ADFM = 1);
   831   001332  8EC0               	bsf	192,7,c	;volatile
   832                           
   833                           ;MCAL_Layer/ADC/hal_adc.c: 281:         }
   834   001334  EFAC  F009         	goto	l897
   835   001338                     l3121:
   836   001338  504C               	movf	select_result_format@_adc^0,w,c
   837   00133A  6ED9               	movwf	fsr2l,c
   838   00133C  6ADA               	clrf	fsr2h,c
   839   00133E  0E06               	movlw	6
   840   001340  26D9               	addwf	fsr2l,f,c
   841   001342  B2DF               	btfsc	indf2,1,c
   842   001344  EFA6  F009         	goto	u2031
   843   001348  EFA8  F009         	goto	u2030
   844   00134C                     u2031:
   845   00134C  EFAB  F009         	goto	l895
   846   001350                     u2030:
   847   001350                     
   848                           ;MCAL_Layer/ADC/hal_adc.c: 283:         {;MCAL_Layer/ADC/hal_adc.c: 284:             (AD
      +                          CON2bits.ADFM = 0);
   849   001350  9EC0               	bcf	192,7,c	;volatile
   850                           
   851                           ;MCAL_Layer/ADC/hal_adc.c: 285:         }
   852   001352  EFAC  F009         	goto	l897
   853   001356                     l895:
   854                           
   855                           ;MCAL_Layer/ADC/hal_adc.c: 287:         {;MCAL_Layer/ADC/hal_adc.c: 288:             (AD
      +                          CON2bits.ADFM = 1);
   856   001356  8EC0               	bsf	192,7,c	;volatile
   857   001358                     l897:
   858   001358  0012               	return		;funcret
   859   00135A                     __end_of_select_result_format:
   860                           	callstack 0
   861                           
   862 ;; *************** function _configure_voltage_reference *****************
   863 ;; Defined at:
   864 ;;		line 294 in file "MCAL_Layer/ADC/hal_adc.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;  _adc            1   10[COMRAM] PTR const struct .
   867 ;;		 -> adc_1(7), 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  ret             1    0        unsigned char 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      unsigned char 
   872 ;; Registers used:
   873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   879 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;Total ram usage:        1 bytes
   884 ;; Hardware stack levels used: 1
   885 ;; Hardware stack levels required when called: 4
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_ADC_Init
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text5
   894   001256                     __ptext5:
   895                           	callstack 0
   896   001256                     _configure_voltage_reference:
   897                           	callstack 24
   898   001256                     
   899                           ;MCAL_Layer/ADC/hal_adc.c: 296:     if (((void*)0) == _adc)
   900   001256  504C               	movf	configure_voltage_reference@_adc^0,w,c
   901   001258  A4D8               	btfss	status,2,c
   902   00125A  EF31  F009         	goto	u2041
   903   00125E  EF33  F009         	goto	u2040
   904   001262                     u2041:
   905   001262  EF35  F009         	goto	l3129
   906   001266                     u2040:
   907   001266                     
   908                           ;MCAL_Layer/ADC/hal_adc.c: 299:     }
   909   001266  EF57  F009         	goto	l912
   910   00126A                     l3129:
   911                           
   912                           ;MCAL_Layer/ADC/hal_adc.c: 301:     {;MCAL_Layer/ADC/hal_adc.c: 302:         if (0X01U =
      +                          = _adc->voltage_reference)
   913   00126A  504C               	movf	configure_voltage_reference@_adc^0,w,c
   914   00126C  6ED9               	movwf	fsr2l,c
   915   00126E  6ADA               	clrf	fsr2h,c
   916   001270  0E06               	movlw	6
   917   001272  26D9               	addwf	fsr2l,f,c
   918   001274  A0DF               	btfss	indf2,0,c
   919   001276  EF3F  F009         	goto	u2051
   920   00127A  EF41  F009         	goto	u2050
   921   00127E                     u2051:
   922   00127E  EF45  F009         	goto	l3131
   923   001282                     u2050:
   924   001282  8AC1               	bsf	193,5,c	;volatile
   925   001284  88C1               	bsf	193,4,c	;volatile
   926   001286  EF57  F009         	goto	l912
   927   00128A                     l3131:
   928   00128A  504C               	movf	configure_voltage_reference@_adc^0,w,c
   929   00128C  6ED9               	movwf	fsr2l,c
   930   00128E  6ADA               	clrf	fsr2h,c
   931   001290  0E06               	movlw	6
   932   001292  26D9               	addwf	fsr2l,f,c
   933   001294  B0DF               	btfsc	indf2,0,c
   934   001296  EF4F  F009         	goto	u2061
   935   00129A  EF51  F009         	goto	u2060
   936   00129E                     u2061:
   937   00129E  EF55  F009         	goto	l910
   938   0012A2                     u2060:
   939   0012A2  9AC1               	bcf	193,5,c	;volatile
   940   0012A4  98C1               	bcf	193,4,c	;volatile
   941   0012A6  EF57  F009         	goto	l912
   942   0012AA                     l910:
   943   0012AA  9AC1               	bcf	193,5,c	;volatile
   944   0012AC  98C1               	bcf	193,4,c	;volatile
   945   0012AE                     l912:
   946   0012AE  0012               	return		;funcret
   947   0012B0                     __end_of_configure_voltage_reference:
   948                           	callstack 0
   949                           
   950 ;; *************** function _ADC_GetConversion_Interrupt *****************
   951 ;; Defined at:
   952 ;;		line 233 in file "MCAL_Layer/ADC/hal_adc.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  _adc            1    0[BANK0 ] PTR const struct .
   955 ;;		 -> adc_1(7), 
   956 ;;  channel         1    1[BANK0 ] enum E3294
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  ret             1   17[COMRAM] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      unsigned char 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;Total ram usage:        3 bytes
   973 ;; Hardware stack levels used: 1
   974 ;; Hardware stack levels required when called: 6
   975 ;; This function calls:
   976 ;;		_ADC_SelectChannel
   977 ;;		_ADC_StartConversion
   978 ;; This function is called by:
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text6
   984   001392                     __ptext6:
   985                           	callstack 0
   986   001392                     _ADC_GetConversion_Interrupt:
   987                           	callstack 24
   988   001392                     
   989                           ;MCAL_Layer/ADC/hal_adc.c: 235:     if (((void*)0) == _adc)
   990   001392  0100               	movlb	0	; () banked
   991   001394  516A               	movf	ADC_GetConversion_Interrupt@_adc& (0+255),w,b
   992   001396  A4D8               	btfss	status,2,c
   993   001398  EFD0  F009         	goto	u2721
   994   00139C  EFD2  F009         	goto	u2720
   995   0013A0                     u2721:
   996   0013A0  EFD6  F009         	goto	l3423
   997   0013A4                     u2720:
   998   0013A4                     
   999                           ; BSR set to: 0
  1000                           ;MCAL_Layer/ADC/hal_adc.c: 236:     {;MCAL_Layer/ADC/hal_adc.c: 237:         ret = (Std_
      +                          ReturnType)0x00;
  1001   0013A4  0E00               	movlw	0
  1002   0013A6  6E53               	movwf	ADC_GetConversion_Interrupt@ret^0,c
  1003                           
  1004                           ;MCAL_Layer/ADC/hal_adc.c: 238:     }
  1005   0013A8  EFE2  F009         	goto	l3425
  1006   0013AC                     l3423:
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;MCAL_Layer/ADC/hal_adc.c: 240:     {;MCAL_Layer/ADC/hal_adc.c: 242:         ret = ADC_S
      +                          electChannel (_adc, channel);
  1010   0013AC  C06A  F04F         	movff	ADC_GetConversion_Interrupt@_adc,ADC_SelectChannel@_adc
  1011   0013B0  C06B  F050         	movff	ADC_GetConversion_Interrupt@channel,ADC_SelectChannel@channel
  1012   0013B4  ECAD  F009         	call	_ADC_SelectChannel	;wreg free
  1013   0013B8  6E53               	movwf	ADC_GetConversion_Interrupt@ret^0,c
  1014                           
  1015                           ;MCAL_Layer/ADC/hal_adc.c: 244:         ret |= ADC_StartConversion (_adc);
  1016   0013BA  C06A  F04C         	movff	ADC_GetConversion_Interrupt@_adc,ADC_StartConversion@_adc
  1017   0013BE  ECFB  F009         	call	_ADC_StartConversion	;wreg free
  1018   0013C2  1253               	iorwf	ADC_GetConversion_Interrupt@ret^0,f,c
  1019   0013C4                     l3425:
  1020                           
  1021                           ;MCAL_Layer/ADC/hal_adc.c: 246:     return ret;
  1022   0013C4  5053               	movf	ADC_GetConversion_Interrupt@ret^0,w,c
  1023   0013C6  0012               	return		;funcret
  1024   0013C8                     __end_of_ADC_GetConversion_Interrupt:
  1025                           	callstack 0
  1026                           
  1027 ;; *************** function _ADC_StartConversion *****************
  1028 ;; Defined at:
  1029 ;;		line 126 in file "MCAL_Layer/ADC/hal_adc.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;  _adc            1   10[COMRAM] PTR const struct .
  1032 ;;		 -> adc_1(7), 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  ret             1   11[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      unsigned char 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1044 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;Total ram usage:        2 bytes
  1049 ;; Hardware stack levels used: 1
  1050 ;; Hardware stack levels required when called: 4
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_ADC_GetConversion_Interrupt
  1055 ;;		_ADC_GetConversion_Blocking
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text7
  1060   0013F6                     __ptext7:
  1061                           	callstack 0
  1062   0013F6                     _ADC_StartConversion:
  1063                           	callstack 25
  1064   0013F6                     
  1065                           ;MCAL_Layer/ADC/hal_adc.c: 127:     Std_ReturnType ret = (Std_ReturnType)0x01;
  1066   0013F6  0E01               	movlw	1
  1067   0013F8  6E4D               	movwf	ADC_StartConversion@ret^0,c
  1068                           
  1069                           ;MCAL_Layer/ADC/hal_adc.c: 128:     if (((void*)0) == _adc)
  1070   0013FA  504C               	movf	ADC_StartConversion@_adc^0,w,c
  1071   0013FC  A4D8               	btfss	status,2,c
  1072   0013FE  EF03  F00A         	goto	u2091
  1073   001402  EF05  F00A         	goto	u2090
  1074   001406                     u2091:
  1075   001406  EF09  F00A         	goto	l834
  1076   00140A                     u2090:
  1077   00140A                     
  1078                           ;MCAL_Layer/ADC/hal_adc.c: 129:     {;MCAL_Layer/ADC/hal_adc.c: 130:         ret = (Std_
      +                          ReturnType)0x00;
  1079   00140A  0E00               	movlw	0
  1080   00140C  6E4D               	movwf	ADC_StartConversion@ret^0,c
  1081                           
  1082                           ;MCAL_Layer/ADC/hal_adc.c: 131:     }
  1083   00140E  EF0A  F00A         	goto	l3181
  1084   001412                     l834:
  1085                           
  1086                           ;MCAL_Layer/ADC/hal_adc.c: 133:     {;MCAL_Layer/ADC/hal_adc.c: 134:         (ADCON0bits
      +                          .GO_nDONE = 1);
  1087   001412  82C2               	bsf	194,1,c	;volatile
  1088   001414                     l3181:
  1089                           
  1090                           ;MCAL_Layer/ADC/hal_adc.c: 136:     return ret;
  1091   001414  504D               	movf	ADC_StartConversion@ret^0,w,c
  1092   001416  0012               	return		;funcret
  1093   001418                     __end_of_ADC_StartConversion:
  1094                           	callstack 0
  1095                           
  1096 ;; *************** function _ADC_SelectChannel *****************
  1097 ;; Defined at:
  1098 ;;		line 104 in file "MCAL_Layer/ADC/hal_adc.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  _adc            1   13[COMRAM] PTR const struct .
  1101 ;;		 -> adc_1(7), 
  1102 ;;  channel         1   14[COMRAM] enum E3294
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  ret             1   16[COMRAM] unsigned char 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      unsigned char 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1114 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;Total ram usage:        4 bytes
  1119 ;; Hardware stack levels used: 1
  1120 ;; Hardware stack levels required when called: 5
  1121 ;; This function calls:
  1122 ;;		_adc_input_channel_port_configure
  1123 ;; This function is called by:
  1124 ;;		_ADC_GetConversion_Interrupt
  1125 ;;		_ADC_GetConversion_Blocking
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text8
  1130   00135A                     __ptext8:
  1131                           	callstack 0
  1132   00135A                     _ADC_SelectChannel:
  1133                           	callstack 24
  1134   00135A                     
  1135                           ;MCAL_Layer/ADC/hal_adc.c: 105:     Std_ReturnType ret = (Std_ReturnType)0x01;
  1136   00135A  0E01               	movlw	1
  1137   00135C  6E52               	movwf	ADC_SelectChannel@ret^0,c
  1138                           
  1139                           ;MCAL_Layer/ADC/hal_adc.c: 106:     if (((void*)0) == _adc)
  1140   00135E  504F               	movf	ADC_SelectChannel@_adc^0,w,c
  1141   001360  A4D8               	btfss	status,2,c
  1142   001362  EFB5  F009         	goto	u2081
  1143   001366  EFB7  F009         	goto	u2080
  1144   00136A                     u2081:
  1145   00136A  EFBB  F009         	goto	l3169
  1146   00136E                     u2080:
  1147   00136E                     
  1148                           ;MCAL_Layer/ADC/hal_adc.c: 107:     {;MCAL_Layer/ADC/hal_adc.c: 108:         ret = (Std_
      +                          ReturnType)0x00;
  1149   00136E  0E00               	movlw	0
  1150   001370  6E52               	movwf	ADC_SelectChannel@ret^0,c
  1151                           
  1152                           ;MCAL_Layer/ADC/hal_adc.c: 109:     }
  1153   001372  EFC7  F009         	goto	l3173
  1154   001376                     l3169:
  1155                           
  1156                           ;MCAL_Layer/ADC/hal_adc.c: 111:     {;MCAL_Layer/ADC/hal_adc.c: 112:         ADCON0bits.
      +                          CHS = channel;
  1157   001376  C050  F051         	movff	ADC_SelectChannel@channel,??_ADC_SelectChannel
  1158   00137A  4651               	rlncf	??_ADC_SelectChannel^0,f,c
  1159   00137C  4651               	rlncf	??_ADC_SelectChannel^0,f,c
  1160   00137E  50C2               	movf	194,w,c	;volatile
  1161   001380  1851               	xorwf	??_ADC_SelectChannel^0,w,c
  1162   001382  0BC3               	andlw	-61
  1163   001384  1851               	xorwf	??_ADC_SelectChannel^0,w,c
  1164   001386  6EC2               	movwf	194,c	;volatile
  1165   001388                     
  1166                           ;MCAL_Layer/ADC/hal_adc.c: 113:         adc_input_channel_port_configure(channel);
  1167   001388  5050               	movf	ADC_SelectChannel@channel^0,w,c
  1168   00138A  EC0B  F008         	call	_adc_input_channel_port_configure
  1169   00138E                     l3173:
  1170                           
  1171                           ;MCAL_Layer/ADC/hal_adc.c: 115:     return ret;
  1172   00138E  5052               	movf	ADC_SelectChannel@ret^0,w,c
  1173   001390  0012               	return		;funcret
  1174   001392                     __end_of_ADC_SelectChannel:
  1175                           	callstack 0
  1176                           
  1177 ;; *************** function _adc_input_channel_port_configure *****************
  1178 ;; Defined at:
  1179 ;;		line 248 in file "MCAL_Layer/ADC/hal_adc.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  channel         1    wreg     enum E3294
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  channel         1   12[COMRAM] enum E3294
  1184 ;;  ret             1    0        unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      unsigned char 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;Total ram usage:        3 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 4
  1201 ;; This function calls:
  1202 ;;		Nothing
  1203 ;; This function is called by:
  1204 ;;		_ADC_Init
  1205 ;;		_ADC_SelectChannel
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text9
  1210   001016                     __ptext9:
  1211                           	callstack 0
  1212   001016                     _adc_input_channel_port_configure:
  1213                           	callstack 24
  1214                           
  1215                           ;incstack = 0
  1216                           ;adc_input_channel_port_configure@channel stored from wreg
  1217   001016  6E4E               	movwf	adc_input_channel_port_configure@channel^0,c
  1218   001018                     
  1219                           ;MCAL_Layer/ADC/hal_adc.c: 250:     switch (channel)
  1220   001018  EF37  F008         	goto	l1655
  1221   00101C                     l1627:
  1222   00101C  8092               	bsf	146,0,c	;volatile
  1223   00101E  EF78  F008         	goto	l888
  1224   001022                     l1629:
  1225   001022  8292               	bsf	146,1,c	;volatile
  1226   001024  EF78  F008         	goto	l888
  1227   001028                     l1631:
  1228   001028  8492               	bsf	146,2,c	;volatile
  1229   00102A  EF78  F008         	goto	l888
  1230   00102E                     l1633:
  1231   00102E  8692               	bsf	146,3,c	;volatile
  1232   001030  EF78  F008         	goto	l888
  1233   001034                     l1635:
  1234   001034  8A92               	bsf	146,5,c	;volatile
  1235   001036  EF78  F008         	goto	l888
  1236   00103A                     l1637:
  1237   00103A  8096               	bsf	150,0,c	;volatile
  1238   00103C  EF78  F008         	goto	l888
  1239   001040                     l1639:
  1240   001040  8296               	bsf	150,1,c	;volatile
  1241   001042  EF78  F008         	goto	l888
  1242   001046                     l1641:
  1243   001046  8496               	bsf	150,2,c	;volatile
  1244   001048  EF78  F008         	goto	l888
  1245   00104C                     l1643:
  1246   00104C  8493               	bsf	147,2,c	;volatile
  1247   00104E  EF78  F008         	goto	l888
  1248   001052                     l1645:
  1249   001052  8693               	bsf	147,3,c	;volatile
  1250   001054  EF78  F008         	goto	l888
  1251   001058                     l1647:
  1252   001058  8293               	bsf	147,1,c	;volatile
  1253   00105A  EF78  F008         	goto	l888
  1254   00105E                     l1649:
  1255   00105E  8893               	bsf	147,4,c	;volatile
  1256   001060  EF78  F008         	goto	l888
  1257   001064                     l1651:
  1258   001064  8093               	bsf	147,0,c	;volatile
  1259   001066  EF78  F008         	goto	l888
  1260   00106A                     l1653:
  1261                           
  1262                           ;MCAL_Layer/ADC/hal_adc.c: 266:     }
  1263   00106A  EF78  F008         	goto	l888
  1264   00106E                     l1655:
  1265   00106E  504E               	movf	adc_input_channel_port_configure@channel^0,w,c
  1266   001070  6E4C               	movwf	??_adc_input_channel_port_configure^0,c
  1267   001072  6A4D               	clrf	(??_adc_input_channel_port_configure+1)^0,c
  1268                           
  1269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1270                           ; Switch size 1, requested type "simple"
  1271                           ; Number of cases is 1, Range of values is 0 to 0
  1272                           ; switch strategies available:
  1273                           ; Name         Instructions Cycles
  1274                           ; simple_byte            4     3 (average)
  1275                           ;	Chosen strategy is simple_byte
  1276   001074  504D               	movf	(??_adc_input_channel_port_configure+1)^0,w,c
  1277   001076  0A00               	xorlw	0	; case 0
  1278   001078  B4D8               	btfsc	status,2,c
  1279   00107A  EF41  F008         	goto	l3453
  1280   00107E  EF35  F008         	goto	l1653
  1281   001082                     l3453:
  1282                           
  1283                           ; Switch size 1, requested type "simple"
  1284                           ; Number of cases is 13, Range of values is 0 to 12
  1285                           ; switch strategies available:
  1286                           ; Name         Instructions Cycles
  1287                           ; simple_byte           40    21 (average)
  1288                           ;	Chosen strategy is simple_byte
  1289   001082  504C               	movf	??_adc_input_channel_port_configure^0,w,c
  1290   001084  0A00               	xorlw	0	; case 0
  1291   001086  B4D8               	btfsc	status,2,c
  1292   001088  EF0E  F008         	goto	l1627
  1293   00108C  0A01               	xorlw	1	; case 1
  1294   00108E  B4D8               	btfsc	status,2,c
  1295   001090  EF11  F008         	goto	l1629
  1296   001094  0A03               	xorlw	3	; case 2
  1297   001096  B4D8               	btfsc	status,2,c
  1298   001098  EF14  F008         	goto	l1631
  1299   00109C  0A01               	xorlw	1	; case 3
  1300   00109E  B4D8               	btfsc	status,2,c
  1301   0010A0  EF17  F008         	goto	l1633
  1302   0010A4  0A07               	xorlw	7	; case 4
  1303   0010A6  B4D8               	btfsc	status,2,c
  1304   0010A8  EF1A  F008         	goto	l1635
  1305   0010AC  0A01               	xorlw	1	; case 5
  1306   0010AE  B4D8               	btfsc	status,2,c
  1307   0010B0  EF1D  F008         	goto	l1637
  1308   0010B4  0A03               	xorlw	3	; case 6
  1309   0010B6  B4D8               	btfsc	status,2,c
  1310   0010B8  EF20  F008         	goto	l1639
  1311   0010BC  0A01               	xorlw	1	; case 7
  1312   0010BE  B4D8               	btfsc	status,2,c
  1313   0010C0  EF23  F008         	goto	l1641
  1314   0010C4  0A0F               	xorlw	15	; case 8
  1315   0010C6  B4D8               	btfsc	status,2,c
  1316   0010C8  EF26  F008         	goto	l1643
  1317   0010CC  0A01               	xorlw	1	; case 9
  1318   0010CE  B4D8               	btfsc	status,2,c
  1319   0010D0  EF29  F008         	goto	l1645
  1320   0010D4  0A03               	xorlw	3	; case 10
  1321   0010D6  B4D8               	btfsc	status,2,c
  1322   0010D8  EF2C  F008         	goto	l1647
  1323   0010DC  0A01               	xorlw	1	; case 11
  1324   0010DE  B4D8               	btfsc	status,2,c
  1325   0010E0  EF2F  F008         	goto	l1649
  1326   0010E4  0A07               	xorlw	7	; case 12
  1327   0010E6  B4D8               	btfsc	status,2,c
  1328   0010E8  EF32  F008         	goto	l1651
  1329   0010EC  EF35  F008         	goto	l1653
  1330   0010F0                     l888:
  1331   0010F0  0012               	return		;funcret
  1332   0010F2                     __end_of_adc_input_channel_port_configure:
  1333                           	callstack 0
  1334                           
  1335 ;; *************** function _InterruptManager *****************
  1336 ;; Defined at:
  1337 ;;		line 35 in file "MCAL_Layer/interrupt/mcal_interrupt_manager.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;Total ram usage:        4 bytes
  1356 ;; Hardware stack levels used: 1
  1357 ;; Hardware stack levels required when called: 3
  1358 ;; This function calls:
  1359 ;;		_ADC_ISR
  1360 ;;		_INT0_ISR
  1361 ;;		_INT1_ISR
  1362 ;;		_INT2_ISR
  1363 ;;		_RB4_ISR
  1364 ;;		_RB5_ISR
  1365 ;;		_RB6_ISR
  1366 ;;		_RB7_ISR
  1367 ;; This function is called by:
  1368 ;;		Interrupt level 2
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	intcode
  1373   000008                     __pintcode:
  1374                           	callstack 0
  1375   000008                     _InterruptManager:
  1376                           	callstack 24
  1377                           
  1378                           ;incstack = 0
  1379   000008  8255               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1380   00000A  CFFA F048          	movff	pclath,??_InterruptManager
  1381   00000E  CFFB F049          	movff	pclatu,??_InterruptManager+1
  1382   000012  CFD9 F04A          	movff	fsr2l,??_InterruptManager+2
  1383   000016  CFDA F04B          	movff	fsr2h,??_InterruptManager+3
  1384   00001A                     
  1385                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 38:     if ((INTCONbits.INT0IE == 1) && 
      +                          (INTCONbits.INT0IF == 1))
  1386   00001A  A8F2               	btfss	242,4,c	;volatile
  1387   00001C  EF12  F000         	goto	i2u229_41
  1388   000020  EF14  F000         	goto	i2u229_40
  1389   000024                     i2u229_41:
  1390   000024  EF1D  F000         	goto	i2l523
  1391   000028                     i2u229_40:
  1392   000028  A2F2               	btfss	242,1,c	;volatile
  1393   00002A  EF19  F000         	goto	i2u230_41
  1394   00002E  EF1B  F000         	goto	i2u230_40
  1395   000032                     i2u230_41:
  1396   000032  EF1D  F000         	goto	i2l523
  1397   000036                     i2u230_40:
  1398   000036                     
  1399                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 39:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 40:         INT0_ISR();
  1400   000036  EC78  F00A         	call	_INT0_ISR	;wreg free
  1401   00003A                     i2l523:
  1402                           
  1403                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 43:     if ((INTCON3bits.INT1IE == 1) &&
      +                           (INTCON3bits.INT1IF == 1))
  1404   00003A  A6F0               	btfss	240,3,c	;volatile
  1405   00003C  EF22  F000         	goto	i2u231_41
  1406   000040  EF24  F000         	goto	i2u231_40
  1407   000044                     i2u231_41:
  1408   000044  EF2D  F000         	goto	i2l525
  1409   000048                     i2u231_40:
  1410   000048  A0F0               	btfss	240,0,c	;volatile
  1411   00004A  EF29  F000         	goto	i2u232_41
  1412   00004E  EF2B  F000         	goto	i2u232_40
  1413   000052                     i2u232_41:
  1414   000052  EF2D  F000         	goto	i2l525
  1415   000056                     i2u232_40:
  1416   000056                     
  1417                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 44:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 45:         INT1_ISR();
  1418   000056  EC76  F00A         	call	_INT1_ISR	;wreg free
  1419   00005A                     i2l525:
  1420                           
  1421                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 48:     if ((INTCON3bits.INT2IE == 1) &&
      +                           (INTCON3bits.INT2IF == 1))
  1422   00005A  A8F0               	btfss	240,4,c	;volatile
  1423   00005C  EF32  F000         	goto	i2u233_41
  1424   000060  EF34  F000         	goto	i2u233_40
  1425   000064                     i2u233_41:
  1426   000064  EF3D  F000         	goto	i2l527
  1427   000068                     i2u233_40:
  1428   000068  A2F0               	btfss	240,1,c	;volatile
  1429   00006A  EF39  F000         	goto	i2u234_41
  1430   00006E  EF3B  F000         	goto	i2u234_40
  1431   000072                     i2u234_41:
  1432   000072  EF3D  F000         	goto	i2l527
  1433   000076                     i2u234_40:
  1434   000076                     
  1435                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 49:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 50:         INT2_ISR();
  1436   000076  EC74  F00A         	call	_INT2_ISR	;wreg free
  1437   00007A                     i2l527:
  1438                           
  1439                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 56:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1440   00007A  A6F2               	btfss	242,3,c	;volatile
  1441   00007C  EF42  F000         	goto	i2u235_41
  1442   000080  EF44  F000         	goto	i2u235_40
  1443   000084                     i2u235_41:
  1444   000084  EF5F  F000         	goto	i2l529
  1445   000088                     i2u235_40:
  1446   000088  A0F2               	btfss	242,0,c	;volatile
  1447   00008A  EF49  F000         	goto	i2u236_41
  1448   00008E  EF4B  F000         	goto	i2u236_40
  1449   000092                     i2u236_41:
  1450   000092  EF5F  F000         	goto	i2l529
  1451   000096                     i2u236_40:
  1452   000096  A881               	btfss	129,4,c	;volatile
  1453   000098  EF50  F000         	goto	i2u237_41
  1454   00009C  EF52  F000         	goto	i2u237_40
  1455   0000A0                     i2u237_41:
  1456   0000A0  EF5F  F000         	goto	i2l529
  1457   0000A4                     i2u237_40:
  1458   0000A4  043A               	decf	_RB4_Flag^0,w,c	;volatile
  1459   0000A6  A4D8               	btfss	status,2,c
  1460   0000A8  EF58  F000         	goto	i2u238_41
  1461   0000AC  EF5A  F000         	goto	i2u238_40
  1462   0000B0                     i2u238_41:
  1463   0000B0  EF5F  F000         	goto	i2l529
  1464   0000B4                     i2u238_40:
  1465   0000B4                     
  1466                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 58:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 59:         RB4_Flag = 0;
  1467   0000B4  0E00               	movlw	0
  1468   0000B6  6E3A               	movwf	_RB4_Flag^0,c	;volatile
  1469   0000B8                     
  1470                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 60:         RB4_ISR(1);
  1471   0000B8  0E01               	movlw	1
  1472   0000BA  EC51  F00A         	call	_RB4_ISR
  1473   0000BE                     i2l529:
  1474                           
  1475                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 63:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1476   0000BE  A6F2               	btfss	242,3,c	;volatile
  1477   0000C0  EF64  F000         	goto	i2u239_41
  1478   0000C4  EF66  F000         	goto	i2u239_40
  1479   0000C8                     i2u239_41:
  1480   0000C8  EF81  F000         	goto	i2l531
  1481   0000CC                     i2u239_40:
  1482   0000CC  A0F2               	btfss	242,0,c	;volatile
  1483   0000CE  EF6B  F000         	goto	i2u240_41
  1484   0000D2  EF6D  F000         	goto	i2u240_40
  1485   0000D6                     i2u240_41:
  1486   0000D6  EF81  F000         	goto	i2l531
  1487   0000DA                     i2u240_40:
  1488   0000DA  B881               	btfsc	129,4,c	;volatile
  1489   0000DC  EF72  F000         	goto	i2u241_41
  1490   0000E0  EF74  F000         	goto	i2u241_40
  1491   0000E4                     i2u241_41:
  1492   0000E4  EF81  F000         	goto	i2l531
  1493   0000E8                     i2u241_40:
  1494   0000E8  503A               	movf	_RB4_Flag^0,w,c	;volatile
  1495   0000EA  A4D8               	btfss	status,2,c
  1496   0000EC  EF7A  F000         	goto	i2u242_41
  1497   0000F0  EF7C  F000         	goto	i2u242_40
  1498   0000F4                     i2u242_41:
  1499   0000F4  EF81  F000         	goto	i2l531
  1500   0000F8                     i2u242_40:
  1501   0000F8                     
  1502                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 65:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 66:         RB4_Flag = 1;
  1503   0000F8  0E01               	movlw	1
  1504   0000FA  6E3A               	movwf	_RB4_Flag^0,c	;volatile
  1505   0000FC                     
  1506                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 67:         RB4_ISR(0);
  1507   0000FC  0E00               	movlw	0
  1508   0000FE  EC51  F00A         	call	_RB4_ISR
  1509   000102                     i2l531:
  1510                           
  1511                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 70:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1512   000102  A6F2               	btfss	242,3,c	;volatile
  1513   000104  EF86  F000         	goto	i2u243_41
  1514   000108  EF88  F000         	goto	i2u243_40
  1515   00010C                     i2u243_41:
  1516   00010C  EFA3  F000         	goto	i2l533
  1517   000110                     i2u243_40:
  1518   000110  A0F2               	btfss	242,0,c	;volatile
  1519   000112  EF8D  F000         	goto	i2u244_41
  1520   000116  EF8F  F000         	goto	i2u244_40
  1521   00011A                     i2u244_41:
  1522   00011A  EFA3  F000         	goto	i2l533
  1523   00011E                     i2u244_40:
  1524   00011E  AA81               	btfss	129,5,c	;volatile
  1525   000120  EF94  F000         	goto	i2u245_41
  1526   000124  EF96  F000         	goto	i2u245_40
  1527   000128                     i2u245_41:
  1528   000128  EFA3  F000         	goto	i2l533
  1529   00012C                     i2u245_40:
  1530   00012C  0439               	decf	_RB5_Flag^0,w,c	;volatile
  1531   00012E  A4D8               	btfss	status,2,c
  1532   000130  EF9C  F000         	goto	i2u246_41
  1533   000134  EF9E  F000         	goto	i2u246_40
  1534   000138                     i2u246_41:
  1535   000138  EFA3  F000         	goto	i2l533
  1536   00013C                     i2u246_40:
  1537   00013C                     
  1538                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 72:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 73:         RB5_Flag = 0;
  1539   00013C  0E00               	movlw	0
  1540   00013E  6E39               	movwf	_RB5_Flag^0,c	;volatile
  1541   000140                     
  1542                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 74:         RB5_ISR(1);
  1543   000140  0E01               	movlw	1
  1544   000142  EC44  F00A         	call	_RB5_ISR
  1545   000146                     i2l533:
  1546                           
  1547                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 77:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1548   000146  A6F2               	btfss	242,3,c	;volatile
  1549   000148  EFA8  F000         	goto	i2u247_41
  1550   00014C  EFAA  F000         	goto	i2u247_40
  1551   000150                     i2u247_41:
  1552   000150  EFC5  F000         	goto	i2l3349
  1553   000154                     i2u247_40:
  1554   000154  A0F2               	btfss	242,0,c	;volatile
  1555   000156  EFAF  F000         	goto	i2u248_41
  1556   00015A  EFB1  F000         	goto	i2u248_40
  1557   00015E                     i2u248_41:
  1558   00015E  EFC5  F000         	goto	i2l3349
  1559   000162                     i2u248_40:
  1560   000162  BA81               	btfsc	129,5,c	;volatile
  1561   000164  EFB6  F000         	goto	i2u249_41
  1562   000168  EFB8  F000         	goto	i2u249_40
  1563   00016C                     i2u249_41:
  1564   00016C  EFC5  F000         	goto	i2l3349
  1565   000170                     i2u249_40:
  1566   000170  5039               	movf	_RB5_Flag^0,w,c	;volatile
  1567   000172  A4D8               	btfss	status,2,c
  1568   000174  EFBE  F000         	goto	i2u250_41
  1569   000178  EFC0  F000         	goto	i2u250_40
  1570   00017C                     i2u250_41:
  1571   00017C  EFC5  F000         	goto	i2l3349
  1572   000180                     i2u250_40:
  1573   000180                     
  1574                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 79:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 80:         RB5_Flag = 1;
  1575   000180  0E01               	movlw	1
  1576   000182  6E39               	movwf	_RB5_Flag^0,c	;volatile
  1577   000184                     
  1578                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 81:         RB5_ISR(0);
  1579   000184  0E00               	movlw	0
  1580   000186  EC44  F00A         	call	_RB5_ISR
  1581   00018A                     i2l3349:
  1582                           
  1583                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 84:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1584   00018A  A6F2               	btfss	242,3,c	;volatile
  1585   00018C  EFCA  F000         	goto	i2u251_41
  1586   000190  EFCC  F000         	goto	i2u251_40
  1587   000194                     i2u251_41:
  1588   000194  EFE7  F000         	goto	i2l536
  1589   000198                     i2u251_40:
  1590   000198  A0F2               	btfss	242,0,c	;volatile
  1591   00019A  EFD1  F000         	goto	i2u252_41
  1592   00019E  EFD3  F000         	goto	i2u252_40
  1593   0001A2                     i2u252_41:
  1594   0001A2  EFE7  F000         	goto	i2l536
  1595   0001A6                     i2u252_40:
  1596   0001A6  AC81               	btfss	129,6,c	;volatile
  1597   0001A8  EFD8  F000         	goto	i2u253_41
  1598   0001AC  EFDA  F000         	goto	i2u253_40
  1599   0001B0                     i2u253_41:
  1600   0001B0  EFE7  F000         	goto	i2l536
  1601   0001B4                     i2u253_40:
  1602   0001B4  0438               	decf	_RB6_Flag^0,w,c	;volatile
  1603   0001B6  A4D8               	btfss	status,2,c
  1604   0001B8  EFE0  F000         	goto	i2u254_41
  1605   0001BC  EFE2  F000         	goto	i2u254_40
  1606   0001C0                     i2u254_41:
  1607   0001C0  EFE7  F000         	goto	i2l536
  1608   0001C4                     i2u254_40:
  1609   0001C4                     
  1610                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 86:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 87:         RB6_Flag = 0;
  1611   0001C4  0E00               	movlw	0
  1612   0001C6  6E38               	movwf	_RB6_Flag^0,c	;volatile
  1613   0001C8                     
  1614                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 88:         RB6_ISR(1);
  1615   0001C8  0E01               	movlw	1
  1616   0001CA  EC37  F00A         	call	_RB6_ISR
  1617   0001CE                     i2l536:
  1618                           
  1619                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 91:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1620   0001CE  A6F2               	btfss	242,3,c	;volatile
  1621   0001D0  EFEC  F000         	goto	i2u255_41
  1622   0001D4  EFEE  F000         	goto	i2u255_40
  1623   0001D8                     i2u255_41:
  1624   0001D8  EF09  F001         	goto	i2l3371
  1625   0001DC                     i2u255_40:
  1626   0001DC  A0F2               	btfss	242,0,c	;volatile
  1627   0001DE  EFF3  F000         	goto	i2u256_41
  1628   0001E2  EFF5  F000         	goto	i2u256_40
  1629   0001E6                     i2u256_41:
  1630   0001E6  EF09  F001         	goto	i2l3371
  1631   0001EA                     i2u256_40:
  1632   0001EA  BC81               	btfsc	129,6,c	;volatile
  1633   0001EC  EFFA  F000         	goto	i2u257_41
  1634   0001F0  EFFC  F000         	goto	i2u257_40
  1635   0001F4                     i2u257_41:
  1636   0001F4  EF09  F001         	goto	i2l3371
  1637   0001F8                     i2u257_40:
  1638   0001F8  5038               	movf	_RB6_Flag^0,w,c	;volatile
  1639   0001FA  A4D8               	btfss	status,2,c
  1640   0001FC  EF02  F001         	goto	i2u258_41
  1641   000200  EF04  F001         	goto	i2u258_40
  1642   000204                     i2u258_41:
  1643   000204  EF09  F001         	goto	i2l3371
  1644   000208                     i2u258_40:
  1645   000208                     
  1646                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 93:     {;MCAL_Layer/interrupt/mcal_inte
      +                          rrupt_manager.c: 94:         RB6_Flag = 1;
  1647   000208  0E01               	movlw	1
  1648   00020A  6E38               	movwf	_RB6_Flag^0,c	;volatile
  1649   00020C                     
  1650                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 95:         RB6_ISR(0);
  1651   00020C  0E00               	movlw	0
  1652   00020E  EC37  F00A         	call	_RB6_ISR
  1653   000212                     i2l3371:
  1654                           
  1655                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 98:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1) &&
  1656   000212  A6F2               	btfss	242,3,c	;volatile
  1657   000214  EF0E  F001         	goto	i2u259_41
  1658   000218  EF10  F001         	goto	i2u259_40
  1659   00021C                     i2u259_41:
  1660   00021C  EF2B  F001         	goto	i2l539
  1661   000220                     i2u259_40:
  1662   000220  A0F2               	btfss	242,0,c	;volatile
  1663   000222  EF15  F001         	goto	i2u260_41
  1664   000226  EF17  F001         	goto	i2u260_40
  1665   00022A                     i2u260_41:
  1666   00022A  EF2B  F001         	goto	i2l539
  1667   00022E                     i2u260_40:
  1668   00022E  AE81               	btfss	129,7,c	;volatile
  1669   000230  EF1C  F001         	goto	i2u261_41
  1670   000234  EF1E  F001         	goto	i2u261_40
  1671   000238                     i2u261_41:
  1672   000238  EF2B  F001         	goto	i2l539
  1673   00023C                     i2u261_40:
  1674   00023C  0437               	decf	_RB7_Flag^0,w,c	;volatile
  1675   00023E  A4D8               	btfss	status,2,c
  1676   000240  EF24  F001         	goto	i2u262_41
  1677   000244  EF26  F001         	goto	i2u262_40
  1678   000248                     i2u262_41:
  1679   000248  EF2B  F001         	goto	i2l539
  1680   00024C                     i2u262_40:
  1681   00024C                     
  1682                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 100:     {;MCAL_Layer/interrupt/mcal_int
      +                          errupt_manager.c: 101:         RB7_Flag = 0;
  1683   00024C  0E00               	movlw	0
  1684   00024E  6E37               	movwf	_RB7_Flag^0,c	;volatile
  1685   000250                     
  1686                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 102:         RB7_ISR(1);
  1687   000250  0E01               	movlw	1
  1688   000252  EC2A  F00A         	call	_RB7_ISR
  1689   000256                     i2l539:
  1690                           
  1691                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 105:     if ((INTCONbits.RBIE == 1) && (
      +                          INTCONbits.RBIF == 1) &&
  1692   000256  A6F2               	btfss	242,3,c	;volatile
  1693   000258  EF30  F001         	goto	i2u263_41
  1694   00025C  EF32  F001         	goto	i2u263_40
  1695   000260                     i2u263_41:
  1696   000260  EF4D  F001         	goto	i2l541
  1697   000264                     i2u263_40:
  1698   000264  A0F2               	btfss	242,0,c	;volatile
  1699   000266  EF37  F001         	goto	i2u264_41
  1700   00026A  EF39  F001         	goto	i2u264_40
  1701   00026E                     i2u264_41:
  1702   00026E  EF4D  F001         	goto	i2l541
  1703   000272                     i2u264_40:
  1704   000272  BE81               	btfsc	129,7,c	;volatile
  1705   000274  EF3E  F001         	goto	i2u265_41
  1706   000278  EF40  F001         	goto	i2u265_40
  1707   00027C                     i2u265_41:
  1708   00027C  EF4D  F001         	goto	i2l541
  1709   000280                     i2u265_40:
  1710   000280  5037               	movf	_RB7_Flag^0,w,c	;volatile
  1711   000282  A4D8               	btfss	status,2,c
  1712   000284  EF46  F001         	goto	i2u266_41
  1713   000288  EF48  F001         	goto	i2u266_40
  1714   00028C                     i2u266_41:
  1715   00028C  EF4D  F001         	goto	i2l541
  1716   000290                     i2u266_40:
  1717   000290                     
  1718                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 107:     {;MCAL_Layer/interrupt/mcal_int
      +                          errupt_manager.c: 108:         RB7_Flag = 1;
  1719   000290  0E01               	movlw	1
  1720   000292  6E37               	movwf	_RB7_Flag^0,c	;volatile
  1721   000294                     
  1722                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 109:         RB7_ISR(0);
  1723   000294  0E00               	movlw	0
  1724   000296  EC2A  F00A         	call	_RB7_ISR
  1725   00029A                     i2l541:
  1726                           
  1727                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 115:     if ((PIE1bits.ADIE == 1) && (PI
      +                          R1bits.ADIF == 1)){
  1728   00029A  AC9D               	btfss	157,6,c	;volatile
  1729   00029C  EF52  F001         	goto	i2u267_41
  1730   0002A0  EF54  F001         	goto	i2u267_40
  1731   0002A4                     i2u267_41:
  1732   0002A4  EF5D  F001         	goto	i2l544
  1733   0002A8                     i2u267_40:
  1734   0002A8  AC9E               	btfss	158,6,c	;volatile
  1735   0002AA  EF59  F001         	goto	i2u268_41
  1736   0002AE  EF5B  F001         	goto	i2u268_40
  1737   0002B2                     i2u268_41:
  1738   0002B2  EF5D  F001         	goto	i2l544
  1739   0002B6                     i2u268_40:
  1740   0002B6                     
  1741                           ;MCAL_Layer/interrupt/mcal_interrupt_manager.c: 116:         ADC_ISR();
  1742   0002B6  ECE4  F009         	call	_ADC_ISR	;wreg free
  1743   0002BA                     i2l544:
  1744   0002BA  C04B  FFDA         	movff	??_InterruptManager+3,fsr2h
  1745   0002BE  C04A  FFD9         	movff	??_InterruptManager+2,fsr2l
  1746   0002C2  C049  FFFB         	movff	??_InterruptManager+1,pclatu
  1747   0002C6  C048  FFFA         	movff	??_InterruptManager,pclath
  1748   0002CA  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1749   0002CC  0011               	retfie		f
  1750   0002CE                     __end_of_InterruptManager:
  1751                           	callstack 0
  1752                           
  1753 ;; *************** function _RB7_ISR *****************
  1754 ;; Defined at:
  1755 ;;		line 168 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  RB7_source      1    wreg     unsigned char 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  RB7_source      1    0[COMRAM] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;Total ram usage:        1 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_InterruptManager
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text11
  1783   001454                     __ptext11:
  1784                           	callstack 0
  1785   001454                     _RB7_ISR:
  1786                           	callstack 26
  1787                           
  1788                           ;incstack = 0
  1789                           ;RB7_ISR@RB7_source stored from wreg
  1790   001454  6E42               	movwf	RB7_ISR@RB7_source^0,c
  1791   001456                     
  1792                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 170:     (INTCONbits.RBIF = 0);
  1793   001456  90F2               	bcf	242,0,c	;volatile
  1794   001458                     
  1795                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 175:     if (0 == RB7_source)
  1796   001458  5042               	movf	RB7_ISR@RB7_source^0,w,c
  1797   00145A  A4D8               	btfss	status,2,c
  1798   00145C  EF32  F00A         	goto	i2u40_41
  1799   001460  EF34  F00A         	goto	i2u40_40
  1800   001464                     i2u40_41:
  1801   001464  EF36  F00A         	goto	i2l1985
  1802   001468                     i2u40_40:
  1803   001468  EF36  F00A         	goto	i2l643
  1804   00146C                     i2l1985:
  1805   00146C                     i2l643:
  1806   00146C  0012               	return		;funcret
  1807   00146E                     __end_of_RB7_ISR:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _RB6_ISR *****************
  1811 ;; Defined at:
  1812 ;;		line 150 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  RB6_source      1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  RB6_source      1    0[COMRAM] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;Total ram usage:        1 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_InterruptManager
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text12
  1840   00146E                     __ptext12:
  1841                           	callstack 0
  1842   00146E                     _RB6_ISR:
  1843                           	callstack 26
  1844                           
  1845                           ;incstack = 0
  1846                           ;RB6_ISR@RB6_source stored from wreg
  1847   00146E  6E42               	movwf	RB6_ISR@RB6_source^0,c
  1848   001470                     
  1849                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 152:     (INTCONbits.RBIF = 0);
  1850   001470  90F2               	bcf	242,0,c	;volatile
  1851   001472                     
  1852                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 157:     if (0 == RB6_source)
  1853   001472  5042               	movf	RB6_ISR@RB6_source^0,w,c
  1854   001474  A4D8               	btfss	status,2,c
  1855   001476  EF3F  F00A         	goto	i2u39_41
  1856   00147A  EF41  F00A         	goto	i2u39_40
  1857   00147E                     i2u39_41:
  1858   00147E  EF43  F00A         	goto	i2l1971
  1859   001482                     i2u39_40:
  1860   001482  EF43  F00A         	goto	i2l633
  1861   001486                     i2l1971:
  1862   001486                     i2l633:
  1863   001486  0012               	return		;funcret
  1864   001488                     __end_of_RB6_ISR:
  1865                           	callstack 0
  1866                           
  1867 ;; *************** function _RB5_ISR *****************
  1868 ;; Defined at:
  1869 ;;		line 132 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  RB5_source      1    wreg     unsigned char 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  RB5_source      1    0[COMRAM] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        1 bytes
  1888 ;; Hardware stack levels used: 1
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_InterruptManager
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text13
  1897   001488                     __ptext13:
  1898                           	callstack 0
  1899   001488                     _RB5_ISR:
  1900                           	callstack 26
  1901                           
  1902                           ;incstack = 0
  1903                           ;RB5_ISR@RB5_source stored from wreg
  1904   001488  6E42               	movwf	RB5_ISR@RB5_source^0,c
  1905   00148A                     
  1906                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 134:     (INTCONbits.RBIF = 0);
  1907   00148A  90F2               	bcf	242,0,c	;volatile
  1908   00148C                     
  1909                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 138:     if (0 == RB5_source)
  1910   00148C  5042               	movf	RB5_ISR@RB5_source^0,w,c
  1911   00148E  A4D8               	btfss	status,2,c
  1912   001490  EF4C  F00A         	goto	i2u38_41
  1913   001494  EF4E  F00A         	goto	i2u38_40
  1914   001498                     i2u38_41:
  1915   001498  EF50  F00A         	goto	i2l1957
  1916   00149C                     i2u38_40:
  1917   00149C  EF50  F00A         	goto	i2l623
  1918   0014A0                     i2l1957:
  1919   0014A0                     i2l623:
  1920   0014A0  0012               	return		;funcret
  1921   0014A2                     __end_of_RB5_ISR:
  1922                           	callstack 0
  1923                           
  1924 ;; *************** function _RB4_ISR *****************
  1925 ;; Defined at:
  1926 ;;		line 114 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  RB4_source      1    wreg     unsigned char 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  RB4_source      1    0[COMRAM] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;Total ram usage:        1 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_InterruptManager
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text14
  1954   0014A2                     __ptext14:
  1955                           	callstack 0
  1956   0014A2                     _RB4_ISR:
  1957                           	callstack 26
  1958                           
  1959                           ;incstack = 0
  1960                           ;RB4_ISR@RB4_source stored from wreg
  1961   0014A2  6E42               	movwf	RB4_ISR@RB4_source^0,c
  1962   0014A4                     
  1963                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 116:     (INTCONbits.RBIF = 0);
  1964   0014A4  90F2               	bcf	242,0,c	;volatile
  1965   0014A6                     
  1966                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 120:     if (0 == RB4_source)
  1967   0014A6  5042               	movf	RB4_ISR@RB4_source^0,w,c
  1968   0014A8  A4D8               	btfss	status,2,c
  1969   0014AA  EF59  F00A         	goto	i2u37_41
  1970   0014AE  EF5B  F00A         	goto	i2u37_40
  1971   0014B2                     i2u37_41:
  1972   0014B2  EF5D  F00A         	goto	i2l1943
  1973   0014B6                     i2u37_40:
  1974   0014B6  EF5D  F00A         	goto	i2l613
  1975   0014BA                     i2l1943:
  1976   0014BA                     i2l613:
  1977   0014BA  0012               	return		;funcret
  1978   0014BC                     __end_of_RB4_ISR:
  1979                           	callstack 0
  1980                           
  1981 ;; *************** function _INT2_ISR *****************
  1982 ;; Defined at:
  1983 ;;		line 101 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  1    wreg      void 
  1990 ;; Registers used:
  1991 ;;		None
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;Total ram usage:        0 bytes
  2002 ;; Hardware stack levels used: 1
  2003 ;; This function calls:
  2004 ;;		Nothing
  2005 ;; This function is called by:
  2006 ;;		_InterruptManager
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text15
  2011   0014E8                     __ptext15:
  2012                           	callstack 0
  2013   0014E8                     _INT2_ISR:
  2014                           	callstack 26
  2015   0014E8                     
  2016                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 103:     (INTCON3bits.INT2IF = 0);
  2017   0014E8  92F0               	bcf	240,1,c	;volatile
  2018   0014EA  0012               	return		;funcret
  2019   0014EC                     __end_of_INT2_ISR:
  2020                           	callstack 0
  2021                           
  2022 ;; *************** function _INT1_ISR *****************
  2023 ;; Defined at:
  2024 ;;		line 88 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		None
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_InterruptManager
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text16
  2052   0014EC                     __ptext16:
  2053                           	callstack 0
  2054   0014EC                     _INT1_ISR:
  2055                           	callstack 26
  2056   0014EC                     
  2057                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 90:     (INTCON3bits.INT1IF = 0);
  2058   0014EC  90F0               	bcf	240,0,c	;volatile
  2059   0014EE  0012               	return		;funcret
  2060   0014F0                     __end_of_INT1_ISR:
  2061                           	callstack 0
  2062                           
  2063 ;; *************** function _INT0_ISR *****************
  2064 ;; Defined at:
  2065 ;;		line 73 in file "MCAL_Layer/interrupt/mcal_external_interrupt.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		None
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used: 1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_InterruptManager
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text17
  2093   0014F0                     __ptext17:
  2094                           	callstack 0
  2095   0014F0                     _INT0_ISR:
  2096                           	callstack 26
  2097   0014F0                     
  2098                           ;MCAL_Layer/interrupt/mcal_external_interrupt.c: 75:     (INTCONbits.INT0IF = 0);
  2099   0014F0  92F2               	bcf	242,1,c	;volatile
  2100   0014F2  0012               	return		;funcret
  2101   0014F4                     __end_of_INT0_ISR:
  2102                           	callstack 0
  2103                           
  2104 ;; *************** function _ADC_ISR *****************
  2105 ;; Defined at:
  2106 ;;		line 317 in file "MCAL_Layer/ADC/hal_adc.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;Total ram usage:        0 bytes
  2125 ;; Hardware stack levels used: 1
  2126 ;; Hardware stack levels required when called: 2
  2127 ;; This function calls:
  2128 ;;		NULL
  2129 ;;		_ADC_DefaultInterruptHandler
  2130 ;; This function is called by:
  2131 ;;		_InterruptManager
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text18
  2136   0013C8                     __ptext18:
  2137                           	callstack 0
  2138   0013C8                     _ADC_ISR:
  2139                           	callstack 24
  2140   0013C8                     
  2141                           ;MCAL_Layer/ADC/hal_adc.c: 318:     (PIR1bits.ADIF = 0);
  2142   0013C8  9C9E               	bcf	158,6,c	;volatile
  2143   0013CA                     
  2144                           ;MCAL_Layer/ADC/hal_adc.c: 319:     if (ADC_InterruptHandler){
  2145   0013CA  5001               	movf	_ADC_InterruptHandler^0,w,c
  2146   0013CC  1002               	iorwf	(_ADC_InterruptHandler+1)^0,w,c
  2147   0013CE  B4D8               	btfsc	status,2,c
  2148   0013D0  EFEC  F009         	goto	i2u210_41
  2149   0013D4  EFEE  F009         	goto	i2u210_40
  2150   0013D8                     i2u210_41:
  2151   0013D8  EFFA  F009         	goto	i2l916
  2152   0013DC                     i2u210_40:
  2153   0013DC                     
  2154                           ;MCAL_Layer/ADC/hal_adc.c: 320:         ADC_InterruptHandler();
  2155   0013DC  D802               	call	i2u211_48
  2156   0013DE  EFFA  F009         	goto	i2u211_49
  2157   0013E2                     i2u211_48:
  2158   0013E2  0005               	push	
  2159   0013E4  6EFA               	movwf	pclath,c
  2160   0013E6  5001               	movf	_ADC_InterruptHandler^0,w,c
  2161   0013E8  6EFD               	movwf	tosl,c
  2162   0013EA  5002               	movf	(_ADC_InterruptHandler+1)^0,w,c
  2163   0013EC  6EFE               	movwf	tosh,c
  2164   0013EE  6AFF               	clrf	tosu,c
  2165   0013F0  50FA               	movf	pclath,w,c
  2166   0013F2  0012               	return		;indir
  2167   0013F4                     i2u211_49:
  2168   0013F4                     i2l916:
  2169   0013F4  0012               	return		;funcret
  2170   0013F6                     __end_of_ADC_ISR:
  2171                           	callstack 0
  2172                           
  2173 ;; *************** function _ADC_DefaultInterruptHandler *****************
  2174 ;; Defined at:
  2175 ;;		line 26 in file "application.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 1
  2196 ;; This function calls:
  2197 ;;		_ADC_GetConversionResult
  2198 ;; This function is called by:
  2199 ;;		_ADC_ISR
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text19
  2204   0014BC                     __ptext19:
  2205                           	callstack 0
  2206   0014BC                     _ADC_DefaultInterruptHandler:
  2207                           	callstack 24
  2208   0014BC                     
  2209                           ;application.c: 27:     adc_flag++;
  2210   0014BC  2A19               	incf	_adc_flag^0,f,c
  2211   0014BE                     
  2212                           ;application.c: 28:     ret = ADC_GetConversionResult(&adc_1,&res_1);
  2213   0014BE  0E3B               	movlw	low _adc_1
  2214   0014C0  6E42               	movwf	ADC_GetConversionResult@_adc^0,c
  2215   0014C2  0E21               	movlw	low _res_1
  2216   0014C4  6E43               	movwf	ADC_GetConversionResult@conversion_result^0,c
  2217   0014C6  EC79  F008         	call	_ADC_GetConversionResult	;wreg free
  2218   0014CA  6E54               	movwf	_ret^0,c
  2219   0014CC  0012               	return		;funcret
  2220   0014CE                     __end_of_ADC_DefaultInterruptHandler:
  2221                           	callstack 0
  2222                           
  2223 ;; *************** function _ADC_GetConversionResult *****************
  2224 ;; Defined at:
  2225 ;;		line 177 in file "MCAL_Layer/ADC/hal_adc.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  _adc            1    0[COMRAM] PTR const struct .
  2228 ;;		 -> adc_1(7), 
  2229 ;;  conversion_r    1    1[COMRAM] PTR unsigned short 
  2230 ;;		 -> res_1(2), 
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  ret             1    5[COMRAM] unsigned char 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      unsigned char 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2245 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;Total ram usage:        6 bytes
  2247 ;; Hardware stack levels used: 1
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_ADC_DefaultInterruptHandler
  2252 ;;		_ADC_GetConversion_Blocking
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text20
  2257   0010F2                     __ptext20:
  2258                           	callstack 0
  2259   0010F2                     _ADC_GetConversionResult:
  2260                           	callstack 24
  2261   0010F2                     
  2262                           ;MCAL_Layer/ADC/hal_adc.c: 178:     Std_ReturnType ret = (Std_ReturnType)0x01;
  2263   0010F2  0E01               	movlw	1
  2264   0010F4  6E47               	movwf	ADC_GetConversionResult@ret^0,c
  2265                           
  2266                           ;MCAL_Layer/ADC/hal_adc.c: 179:     if ((((void*)0) == _adc) || (((void*)0) == conversio
      +                          n_result))
  2267   0010F6  5042               	movf	ADC_GetConversionResult@_adc^0,w,c
  2268   0010F8  B4D8               	btfsc	status,2,c
  2269   0010FA  EF81  F008         	goto	i2u196_41
  2270   0010FE  EF83  F008         	goto	i2u196_40
  2271   001102                     i2u196_41:
  2272   001102  EF8B  F008         	goto	i2l3097
  2273   001106                     i2u196_40:
  2274   001106  5043               	movf	ADC_GetConversionResult@conversion_result^0,w,c
  2275   001108  A4D8               	btfss	status,2,c
  2276   00110A  EF89  F008         	goto	i2u197_41
  2277   00110E  EF8B  F008         	goto	i2u197_40
  2278   001112                     i2u197_41:
  2279   001112  EF8F  F008         	goto	i2l3099
  2280   001116                     i2u197_40:
  2281   001116                     i2l3097:
  2282                           
  2283                           ;MCAL_Layer/ADC/hal_adc.c: 180:     {;MCAL_Layer/ADC/hal_adc.c: 181:         ret = (Std_
      +                          ReturnType)0x00;
  2284   001116  0E00               	movlw	0
  2285   001118  6E47               	movwf	ADC_GetConversionResult@ret^0,c
  2286                           
  2287                           ;MCAL_Layer/ADC/hal_adc.c: 182:     }
  2288   00111A  EFD3  F008         	goto	i2l3109
  2289   00111E                     i2l3099:
  2290                           
  2291                           ;MCAL_Layer/ADC/hal_adc.c: 184:     {;MCAL_Layer/ADC/hal_adc.c: 185:         if (0X01U =
      +                          = _adc->result_format)
  2292   00111E  5042               	movf	ADC_GetConversionResult@_adc^0,w,c
  2293   001120  6ED9               	movwf	fsr2l,c
  2294   001122  6ADA               	clrf	fsr2h,c
  2295   001124  0E06               	movlw	6
  2296   001126  26D9               	addwf	fsr2l,f,c
  2297   001128  A2DF               	btfss	indf2,1,c
  2298   00112A  EF99  F008         	goto	i2u198_41
  2299   00112E  EF9B  F008         	goto	i2u198_40
  2300   001132                     i2u198_41:
  2301   001132  EFAE  F008         	goto	i2l3103
  2302   001136                     i2u198_40:
  2303   001136                     i2l3101:
  2304                           
  2305                           ;MCAL_Layer/ADC/hal_adc.c: 186:         {;MCAL_Layer/ADC/hal_adc.c: 187:             *co
      +                          nversion_result = (adc_result_t)((ADRESH << 8) + ADRESL );
  2306   001136  50C3               	movf	195,w,c	;volatile
  2307   001138  CFC4 F044          	movff	4036,??_ADC_GetConversionResult	;volatile
  2308   00113C  6A45               	clrf	(??_ADC_GetConversionResult+1)^0,c
  2309   00113E  C044  F045         	movff	??_ADC_GetConversionResult,??_ADC_GetConversionResult+1
  2310   001142  6A44               	clrf	??_ADC_GetConversionResult^0,c
  2311   001144  2644               	addwf	??_ADC_GetConversionResult^0,f,c
  2312   001146  0E00               	movlw	0
  2313   001148  2245               	addwfc	(??_ADC_GetConversionResult+1)^0,f,c
  2314   00114A  5043               	movf	ADC_GetConversionResult@conversion_result^0,w,c
  2315   00114C  6ED9               	movwf	fsr2l,c
  2316   00114E  6ADA               	clrf	fsr2h,c
  2317   001150  C044  FFDE         	movff	??_ADC_GetConversionResult,postinc2
  2318   001154  C045  FFDD         	movff	??_ADC_GetConversionResult+1,postdec2
  2319                           
  2320                           ;MCAL_Layer/ADC/hal_adc.c: 188:         }
  2321   001158  EFD3  F008         	goto	i2l3109
  2322   00115C                     i2l3103:
  2323   00115C  5042               	movf	ADC_GetConversionResult@_adc^0,w,c
  2324   00115E  6ED9               	movwf	fsr2l,c
  2325   001160  6ADA               	clrf	fsr2h,c
  2326   001162  0E06               	movlw	6
  2327   001164  26D9               	addwf	fsr2l,f,c
  2328   001166  B2DF               	btfsc	indf2,1,c
  2329   001168  EFB8  F008         	goto	i2u199_41
  2330   00116C  EFBA  F008         	goto	i2u199_40
  2331   001170                     i2u199_41:
  2332   001170  EF9B  F008         	goto	i2l3101
  2333   001174                     i2u199_40:
  2334   001174                     
  2335                           ;MCAL_Layer/ADC/hal_adc.c: 190:         {;MCAL_Layer/ADC/hal_adc.c: 191:             *co
      +                          nversion_result = (adc_result_t)(((ADRESH << 8) + ADRESL ) >> 6 ) ;
  2336   001174  50C3               	movf	195,w,c	;volatile
  2337   001176  CFC4 F044          	movff	4036,??_ADC_GetConversionResult	;volatile
  2338   00117A  6A45               	clrf	(??_ADC_GetConversionResult+1)^0,c
  2339   00117C  C044  F045         	movff	??_ADC_GetConversionResult,??_ADC_GetConversionResult+1
  2340   001180  6A44               	clrf	??_ADC_GetConversionResult^0,c
  2341   001182  2644               	addwf	??_ADC_GetConversionResult^0,f,c
  2342   001184  0E00               	movlw	0
  2343   001186  2245               	addwfc	(??_ADC_GetConversionResult+1)^0,f,c
  2344   001188  0E06               	movlw	6
  2345   00118A  6E46               	movwf	(??_ADC_GetConversionResult+2)^0,c
  2346   00118C                     i2u200_45:
  2347   00118C  3445               	rlcf	(??_ADC_GetConversionResult+1)^0,w,c
  2348   00118E  3245               	rrcf	(??_ADC_GetConversionResult+1)^0,f,c
  2349   001190  3244               	rrcf	??_ADC_GetConversionResult^0,f,c
  2350   001192  2E46               	decfsz	(??_ADC_GetConversionResult+2)^0,f,c
  2351   001194  EFC6  F008         	goto	i2u200_45
  2352   001198  5043               	movf	ADC_GetConversionResult@conversion_result^0,w,c
  2353   00119A  6ED9               	movwf	fsr2l,c
  2354   00119C  6ADA               	clrf	fsr2h,c
  2355   00119E  C044  FFDE         	movff	??_ADC_GetConversionResult,postinc2
  2356   0011A2  C045  FFDD         	movff	??_ADC_GetConversionResult+1,postdec2
  2357   0011A6                     i2l3109:
  2358                           
  2359                           ;MCAL_Layer/ADC/hal_adc.c: 198:     return ret;
  2360   0011A6  5047               	movf	ADC_GetConversionResult@ret^0,w,c
  2361   0011A8  0012               	return		;funcret
  2362   0011AA                     __end_of_ADC_GetConversionResult:
  2363                           	callstack 0
  2364                           
  2365                           	psect	rparam
  2366   000000                     
  2367                           	psect	temp
  2368   000055                     btemp:
  2369                           	callstack 0
  2370   000055                     	ds	1
  2371   000000                     int$flags	set	btemp
  2372   000000                     wtemp8	set	btemp+1
  2373   000000                     ttemp5	set	btemp+1
  2374   000000                     ttemp6	set	btemp+4
  2375   000000                     ttemp7	set	btemp+8
  2376                           
  2377                           	psect	config
  2378                           
  2379                           ; Padding undefined space
  2380   300000                     	org	3145728
  2381   300000  FF                 	db	255
  2382                           
  2383                           ;Config register CONFIG1H @ 0x300001
  2384                           ;	Oscillator Selection bits
  2385                           ;	FOSC = RCIO6, External RC oscillator, port function on RA6
  2386                           ;	Fail-Safe Clock Monitor Enable bit
  2387                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2388                           ;	Internal/External Oscillator Switchover bit
  2389                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2390   300001                     	org	3145729
  2391   300001  07                 	db	7
  2392                           
  2393                           ;Config register CONFIG2L @ 0x300002
  2394                           ;	Power-up Timer Enable bit
  2395                           ;	PWRTEN = OFF, PWRT disabled
  2396                           ;	Brown-out Reset Enable bits
  2397                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2398                           ;	Brown Out Reset Voltage bits
  2399                           ;	BORV = 18, VBOR set to 1.8 V nominal
  2400   300002                     	org	3145730
  2401   300002  1F                 	db	31
  2402                           
  2403                           ;Config register CONFIG2H @ 0x300003
  2404                           ;	Watchdog Timer Enable bit
  2405                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
  2406                           ;	Watchdog Timer Postscale Select bits
  2407                           ;	WDTPS = 32768, 1:32768
  2408   300003                     	org	3145731
  2409   300003  1F                 	db	31
  2410                           
  2411                           ; Padding undefined space
  2412   300004                     	org	3145732
  2413   300004  FF                 	db	255
  2414                           
  2415                           ;Config register CONFIG3H @ 0x300005
  2416                           ;	CCP2 MUX bit
  2417                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2418                           ;	PORTB A/D Enable bit
  2419                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2420                           ;	Low-Power Timer1 Oscillator Enable bit
  2421                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2422                           ;	HFINTOSC Fast Start-up
  2423                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
  2424                           ;	MCLR Pin Enable bit
  2425                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2426   300005                     	org	3145733
  2427   300005  89                 	db	137
  2428                           
  2429                           ;Config register CONFIG4L @ 0x300006
  2430                           ;	Stack Full/Underflow Reset Enable bit
  2431                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2432                           ;	Single-Supply ICSP Enable bit
  2433                           ;	LVP = ON, Single-Supply ICSP enabled
  2434                           ;	Extended Instruction Set Enable bit
  2435                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2436                           ;	Background Debugger Enable bit
  2437                           ;	DEBUG = 0x1, unprogrammed default
  2438   300006                     	org	3145734
  2439   300006  85                 	db	133
  2440                           
  2441                           ; Padding undefined space
  2442   300007                     	org	3145735
  2443   300007  FF                 	db	255
  2444                           
  2445                           ;Config register CONFIG5L @ 0x300008
  2446                           ;	Code Protection Block 0
  2447                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2448                           ;	Code Protection Block 1
  2449                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2450                           ;	Code Protection Block 2
  2451                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2452                           ;	Code Protection Block 3
  2453                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2454   300008                     	org	3145736
  2455   300008  0F                 	db	15
  2456                           
  2457                           ;Config register CONFIG5H @ 0x300009
  2458                           ;	Boot Block Code Protection bit
  2459                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2460                           ;	Data EEPROM Code Protection bit
  2461                           ;	CPD = OFF, Data EEPROM not code-protected
  2462   300009                     	org	3145737
  2463   300009  C0                 	db	192
  2464                           
  2465                           ;Config register CONFIG6L @ 0x30000A
  2466                           ;	Write Protection Block 0
  2467                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2468                           ;	Write Protection Block 1
  2469                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2470                           ;	Write Protection Block 2
  2471                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2472                           ;	Write Protection Block 3
  2473                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  2474   30000A                     	org	3145738
  2475   30000A  0F                 	db	15
  2476                           
  2477                           ;Config register CONFIG6H @ 0x30000B
  2478                           ;	Configuration Register Write Protection bit
  2479                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2480                           ;	Boot Block Write Protection bit
  2481                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2482                           ;	Data EEPROM Write Protection bit
  2483                           ;	WRTD = OFF, Data EEPROM not write-protected
  2484   30000B                     	org	3145739
  2485   30000B  E0                 	db	224
  2486                           
  2487                           ;Config register CONFIG7L @ 0x30000C
  2488                           ;	Table Read Protection Block 0
  2489                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2490                           ;	Table Read Protection Block 1
  2491                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2492                           ;	Table Read Protection Block 2
  2493                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2494                           ;	Table Read Protection Block 3
  2495                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2496   30000C                     	org	3145740
  2497   30000C  0F                 	db	15
  2498                           
  2499                           ;Config register CONFIG7H @ 0x30000D
  2500                           ;	Boot Block Table Read Protection bit
  2501                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2502   30000D                     	org	3145741
  2503   30000D  40                 	db	64
  2504                           tosu	equ	0xFFF
  2505                           tosh	equ	0xFFE
  2506                           tosl	equ	0xFFD
  2507                           stkptr	equ	0xFFC
  2508                           pclatu	equ	0xFFB
  2509                           pclath	equ	0xFFA
  2510                           pcl	equ	0xFF9
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           indf0	equ	0xFEF
  2518                           postinc0	equ	0xFEE
  2519                           postdec0	equ	0xFED
  2520                           preinc0	equ	0xFEC
  2521                           plusw0	equ	0xFEB
  2522                           fsr0h	equ	0xFEA
  2523                           fsr0l	equ	0xFE9
  2524                           wreg	equ	0xFE8
  2525                           indf1	equ	0xFE7
  2526                           postinc1	equ	0xFE6
  2527                           postdec1	equ	0xFE5
  2528                           preinc1	equ	0xFE4
  2529                           plusw1	equ	0xFE3
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           bsr	equ	0xFE0
  2533                           indf2	equ	0xFDF
  2534                           postinc2	equ	0xFDE
  2535                           postdec2	equ	0xFDD
  2536                           preinc2	equ	0xFDC
  2537                           plusw2	equ	0xFDB
  2538                           fsr2h	equ	0xFDA
  2539                           fsr2l	equ	0xFD9
  2540                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        41
    BSS         34
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      84
    BANK0           160      2      12
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    adc_1$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    ADC_GetConversion_Interrupt@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    ADC_GetConversionResult@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    ADC_GetConversionResult@_adc$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    ADC_GetConversionResult@conversion_result	PTR unsigned short  size(1) Largest target is 2
		 -> res_1(COMRAM[2]), 

    ADC_Init@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    ADC_Init@_adc$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), NULL(), 

    ADC_SelectChannel@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    ADC_StartConversion@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    configure_voltage_reference@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    configure_voltage_reference@_adc$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    Interrupt_INTx_Clear_Flag@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_SetInterruptHandler@int_obj$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@int_obj$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@int_obj$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRllllll[1]), LATB(BITBIGSFRllllh[1]), LATC(BITBIGSFRllllh[1]), LATD(BITBIGSFRllllh[1]), 
		 -> LATE(BITBIGSFRllllh[1]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRllllll[1]), PORTB(BITBIGSFRlllllh[1]), PORTC(BITBIGSFRlllllh[1]), PORTD(BITBIGSFRlllllh[1]), 
		 -> PORTE(BITBIGSFRlllllh[1]), 

    RB4_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB4_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S1169$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    S1267$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    S1267$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    S1510$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    S2350$buffer	PTR unsigned char  size(2) Largest target is 0

    S2350$source	PTR const unsigned char  size(2) Largest target is 0

    select_result_format@_adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), 

    select_result_format@_adc$ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    sp__memset	PTR void  size(2) Largest target is 0

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRllllll[1]), TRISB(BITBIGSFRlllhl[1]), TRISC(BITBIGSFRlllhl[1]), TRISD(BITBIGSFRlllhl[1]), 
		 -> TRISE(BITBIGSFRlllhl[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ADC_GetConversion_Interrupt
    _Application->_ADC_Init
    _ADC_Init->_adc_input_channel_port_configure
    _ADC_GetConversion_Interrupt->_ADC_SelectChannel
    _ADC_SelectChannel->_adc_input_channel_port_configure

Critical Paths under _InterruptManager in COMRAM

    _ADC_DefaultInterruptHandler->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_ADC_GetConversion_Interrupt

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1555
        _ADC_GetConversion_Interrupt
                        _Application
 ---------------------------------------------------------------------------------
 (1) _Application                                          0     0      0     596
                           _ADC_Init
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1     596
                                             13 COMRAM     3     2      1
   _adc_input_channel_port_configure
        _configure_voltage_reference
               _select_result_format
 ---------------------------------------------------------------------------------
 (3) _select_result_format                                 2     1      1     150
                                             10 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _configure_voltage_reference                          2     1      1     150
                                             10 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion_Interrupt                          3     1      2     959
                                             17 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                  _ADC_SelectChannel
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  2     1      1     198
                                             10 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    4     2      2     414
                                             13 COMRAM     4     2      2
   _adc_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (3) _adc_input_channel_port_configure                     4     4      0      20
                                             10 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptManager                                     4     4      0     602
                                              6 COMRAM     4     4      0
                            _ADC_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0     482
                                NULL *
        _ADC_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _ADC_DefaultInterruptHandler                          0     0      0     482
            _ADC_GetConversionResult
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversionResult                              6     4      2     482
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion_Interrupt
     _ADC_SelectChannel
       _adc_input_channel_port_configure
     _ADC_StartConversion
   _Application
     _ADC_Init
       _adc_input_channel_port_configure
       _configure_voltage_reference
       _select_result_format
     _ecu_layer_initialize

 _InterruptManager (ROOT)
   _ADC_ISR
     NULL(Fake) *
     _ADC_DefaultInterruptHandler *
       _ADC_GetConversionResult
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      45        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2       C       5        7.5%
BITBANK15           60      0       0      34        0.0%
BANK15              60      0       0      35        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      54       1       89.4%
BITBIGSFRlhlhh      2B      0       0      37        0.0%
BITBIGSFRllllll     20      0       0      43        0.0%
BITBIGSFRlhlll      15      0       0      38        0.0%
BITBIGSFRh           D      0       0      36        0.0%
BITBIGSFRlllhh       7      0       0      39        0.0%
BITBIGSFRlllhl       6      0       0      40        0.0%
BITBIGSFRlllllh      4      0       0      42        0.0%
BITBIGSFRllllh       4      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60      44        0.0%
DATA                 0      0      60       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Sep 13 15:21:32 2024

                      ??_InterruptManager 0048                                       l341 14F4  
                                     l821 1254                                       l910 12AA  
                                     l831 1390                                       l903 1282  
                                     l912 12AE                                       l834 1412  
                                     l907 12A2                                       l819 11C6  
                                     l836 1416                                       l786 14DC  
                                     l869 13C6                                       l895 1356  
                                     l888 10F0                                       l897 1358  
     __end_of_configure_voltage_reference 12B0               _configure_voltage_reference 1256  
               _RB5_InterruptHandler_HIGH 000D                           __end_of_ADC_ISR 13F6  
                                     _ret 0054                       led_initialize@F3310 0020  
                                     tosl 0FFD                                       wreg 0FE8  
                   relay_initialize@F3304 001C              ?_ADC_DefaultInterruptHandler 0042  
                         __end_of_RB4_ISR 14BC                           __end_of_RB5_ISR 14A2  
                         __end_of_RB6_ISR 1488                           __end_of_RB7_ISR 146E  
                                    l3121 1338                                      l3113 1306  
                                    l3131 128A                                      l3123 1350  
                                    l3115 1316                                      l3125 1256  
                                    l3117 131A                                      l3141 11C8  
                                    l1631 1028                                      l3127 1266  
                                    l3119 1332                                      l3151 1230  
                                    l3143 121A                                      l1641 1046  
                                    l1633 102E                                      l1625 1018  
                                    l3129 126A                                      l3153 1232  
                                    l3145 122A                                      l3161 1252  
                                    l3137 11AA                                      l1651 1064  
                                    l1643 104C                                      l1635 1034  
                                    l1627 101C                                      l3171 1388  
                                    l3155 1240                                      l3147 122C  
                                    l3139 11BE                                      l1653 106A  
                                    l1645 1052                                      l1637 103A  
                                    l1629 1022                                      l3173 138E  
                                    l3165 135A                                      l3181 1414  
                                    l3421 13A4                                      l3157 1248  
                                    l3149 122E                                      l1647 1058  
                                    l1639 1040                                      l1655 106E  
                                    l3167 136E                                      l3423 13AC  
                                    l3159 1250                                      l3191 14CE  
                                    l3431 143C                                      l1649 105E  
                                    l3169 1376                                      l3177 13F6  
                                    l3425 13C4                                      l3193 14D8  
                                    l3179 140A                                      l3419 1392  
                                    l3453 1082                                      l3429 1438  
                                    STR_1 1011                                      u2010 1316  
                                    u2011 1312                                      u2020 1332  
                                    u2021 132E                                      u2030 1350  
                                    u2031 134C                                      u2040 1266  
                                    u2041 1262                                      u2050 1282  
                                    u2051 127E                                      u2060 12A2  
                                    u2061 129E                                      _LATA 0F89  
                                    u2070 11BE                                      _LATB 0F8A  
                                    u2071 11BA                                      _LATC 0F8B  
                                    u2080 136E                                      _LATD 0F8C  
                                    u2081 136A                                      _LATE 0F8D  
                                    u2090 140A                                      u2091 1406  
                                    u2720 13A4                                      u2721 13A0  
                _RB4_InterruptHandler_LOW 000F                                      _main 1438  
                _RB7_InterruptHandler_LOW 0003                                      fsr2h 0FDA  
                                    indf2 0FDF                                      fsr1l 0FE1  
                                    fsr2l 0FD9                                      btemp 0055  
                        __end_of_ADC_Init 1256                                      start 02CE  
          ADC_GetConversion_Interrupt@ret 0053                       __end_of_Application 14DE  
                            ___param_bank 0000                          __end_of_INT0_ISR 14F4  
                        __end_of_INT1_ISR 14F0                          __end_of_INT2_ISR 14EC  
                                   ?_main 0042                                     _EEADR 0FA9  
                                   i2l603 14EA                                     i2l531 0102  
                                   i2l523 003A                                     i2l613 14BA  
                                   i2l541 029A                                     i2l533 0146  
                                   i2l525 005A                                     i2l623 14A0  
                                   i2l527 007A                                     i2l544 02BA  
                                   i2l536 01CE                                     i2l633 1486  
                                   i2l529 00BE                                     i2l643 146C  
                                   i2l539 0256                                     i2l595 14F2  
                                   i2l916 13F4                                     i2l854 11A8  
                                   i2l775 14CC                                     i2l599 14EE  
                     relay_turn_off@F3314 001A                                     _PORTA 0F80  
                                   _PORTB 0F81                                     _PORTC 0F82  
                                   _PORTD 0F83                                     _PORTE 0F84  
                                   _TRISA 0F92                                     _TRISB 0F93  
                                   _TRISC 0F94                                     _TRISD 0F95  
                                   _TRISE 0F96                                     _adc_1 003B  
                                   _res_1 0021              ?_ADC_GetConversion_Interrupt 006A  
                                   pclath 0FFA                                     pclatu 0FFB  
                                   tablat 0FF5                                     ttemp5 0056  
                                   ttemp6 0059                                     ttemp7 005D  
                                   status 0FD8                                     wtemp8 0056  
                         __initialization 12B0                              __end_of_main 1454  
                               ??_ADC_ISR 0048                             _lat_registers 0023  
                                  ??_main 0054                             __activetblptr 0003  
                        led_turn_on@F3315 001F                                 ??_RB4_ISR 0042  
                               ??_RB5_ISR 0042                                 ??_RB6_ISR 0042  
                               ??_RB7_ISR 0042                                    _ADRESH 0FC4  
                                  _EEADRH 0FAA                                    _ADRESL 0FC3  
                                  _EEDATA 0FA8                                    _EECON2 0FA7  
                                  i2l3101 1136                                    i2l3103 115C  
                                  i2l3105 1174                                    i2l3109 11A6  
                                  i2l3133 14BC                                    i2l3301 0048  
                                  i2l3135 14BE                                    i2l3311 0096  
                                  i2l3303 0056                                    i2l3321 00DA  
                                  i2l3313 00A4                                    i2l3305 0068  
                                  i2l3331 011E                                    i2l3323 00E8  
                                  i2l3315 00B4                                    i2l3307 0076  
                                  i2l3093 10F2                                    i2l3341 0162  
                                  i2l3333 012C                                    i2l3325 00F8  
                                  i2l3317 00B8                                    i2l3309 0088  
                                  i2l3095 1106                                    i2l3351 0198  
                                  i2l3343 0170                                    i2l3335 013C  
                                  i2l3327 00FC                                    i2l3319 00CC  
                                  i2l3097 1116                                    i2l3185 13C8  
                                  i2l3361 01DC                                    i2l3353 01A6  
                                  i2l3345 0180                                    i2l3337 0140  
                                  i2l3329 0110                                    i2l3099 111E  
                                  i2l3187 13CA                                    i2l1923 14F0  
                                  i2l1931 14E8                                    i2l3363 01EA  
                                  i2l3371 0212                                    i2l3355 01B4  
                                  i2l3347 0184                                    i2l3339 0154  
                                  i2l3189 13DC                                    i2l3381 0250  
                                  i2l3373 0220                                    i2l3365 01F8  
                                  i2l3357 01C4                                    i2l3349 018A  
                                  i2l1927 14EC                                    i2l1943 14BA  
                                  i2l1935 14A4                                    i2l1951 148C  
                                  i2l3391 0294                                    i2l3383 0264  
                                  i2l3375 022E                                    i2l3367 0208  
                                  i2l3359 01C8                                    i2l3295 001A  
                                  i2l1937 14A6                                    i2l3393 02A8  
                                  i2l3385 0272                                    i2l3377 023C  
                                  i2l3369 020C                                    i2l3297 0028  
                                  i2l1971 1486                                    i2l1963 1470  
                                  i2l3395 02B6                                    i2l3387 0280  
                                  i2l3379 024C                                    i2l3299 0036  
                                  i2l1957 14A0                                    i2l1949 148A  
                                  i2l1965 1472                                    i2l3389 0290  
                                  i2l1985 146C                                    i2l1977 1456  
                                  i2l1979 1458                               _Application 14CE  
                                  clear_0 12F6                                    isa$std 0001  
                            __pdataCOMRAM 0023                                 ?_ADC_Init 004F  
                            __mediumconst 0000                                    tblptrh 0FF7  
                                  tblptrl 0FF6                                    tblptru 0FF8  
            __end_of_select_result_format 135A                                __accesstop 0060  
                 __end_of__initialization 12FC                                 ?_INT0_ISR 0042  
                               ?_INT1_ISR 0042                                 ?_INT2_ISR 0042  
                           ___rparam_used 0001                            __pcstackCOMRAM 0042  
                            __pidataBANK0 14DE                         RB5_ISR@RB5_source 0042  
                 _ADC_GetConversionResult 10F2                                ??_ADC_Init 0050  
                    ADC_SelectChannel@ret 0052                    ADC_StartConversion@ret 004D  
                   _INT0_InterruptHandler 0017                                ??_INT0_ISR 0042  
                              ??_INT1_ISR 0042                                ??_INT2_ISR 0042  
                              __pnvCOMRAM 0054                ADC_GetConversionResult@ret 0047  
                       led_turn_off@F3320 001E                                   _ADC_ISR 13C8  
                                 _RB4_ISR 14A2                                   _RB5_ISR 1488  
                                 _RB6_ISR 146E                                   _RB7_ISR 1454  
               _RB6_InterruptHandler_HIGH 0009                      led_turn_toggle@F3325 001D  
                                 i2u40_40 1468                                   i2u40_41 1464  
                                 i2u37_40 14B6                                   i2u37_41 14B2  
                                 i2u38_40 149C                                   i2u38_41 1498  
                                 i2u39_40 1482                                   i2u39_41 147E  
                       RB7_ISR@RB7_source 0042        ADC_GetConversion_Interrupt@channel 006B  
                              _btn_values 1001                            _tris_registers 002D  
                _RB6_InterruptHandler_LOW 0007                      _ADC_InterruptHandler 0001  
                                 __Hparam 0000                              ADC_Init@_adc 004F  
                                 __Lparam 0000                              __psmallconst 1000  
               ??_ADC_GetConversionResult 0044                                   __pcinit 12B0  
                    _select_result_format 1306                                   __ramtop 1000  
                                 __ptext0 1438                                   __ptext1 14CE  
                                 __ptext2 14F4                                   __ptext3 11AA  
                                 __ptext4 1306                                   __ptext5 1256  
                                 __ptext6 1392                                   __ptext7 13F6  
                                 __ptext8 135A                                   __ptext9 1016  
                    end_of_initialization 12FC                  select_result_format@_adc 004C  
                            ?_Application 0042                                   postdec1 0FE5  
                                 postdec2 0FDD                                   postinc0 0FEE  
                                 postinc2 0FDE                     ?_select_result_format 004C  
                   _INT1_InterruptHandler 0015                                 _PORTBbits 0F81  
                        _InterruptManager 0008       __end_of_ADC_DefaultInterruptHandler 14CE  
             _ADC_DefaultInterruptHandler 14BC                       _ADC_StartConversion 13F6  
           ??_ADC_DefaultInterruptHandler 0048                        relay_turn_on@F3309 001B  
                    ?_ADC_StartConversion 004C                             __pidataCOMRAM 1418  
 adc_input_channel_port_configure@channel 004E              ?_configure_voltage_reference 004C  
                     start_initialization 12B0       __end_of_ADC_GetConversion_Interrupt 13C8  
             _ADC_GetConversion_Interrupt 1392  ADC_GetConversionResult@conversion_result 0043  
                   ADC_SelectChannel@_adc 004F             ??_ADC_GetConversion_Interrupt 0053  
                   ??_ADC_StartConversion 004D                    ??_select_result_format 004D  
                             __pdataBANK0 0060                                  ?_ADC_ISR 0042  
            __end_of_ecu_layer_initialize 14F6                   ADC_StartConversion@_adc 004C  
                                ?_RB4_ISR 0042                                  ?_RB5_ISR 0042  
                                ?_RB6_ISR 0042                                  ?_RB7_ISR 0042  
                             __pbssCOMRAM 0001                             __pcstackBANK0 006A  
           ??_configure_voltage_reference 004D               ADC_GetConversionResult@_adc 0042  
                   _INT2_InterruptHandler 0013                                 __pintcode 0008  
__end_of_adc_input_channel_port_configure 10F2        ??_adc_input_channel_port_configure 004C  
       ?_adc_input_channel_port_configure 0042          _adc_input_channel_port_configure 1016  
                       _ADC_SelectChannel 135A                        ?_ADC_SelectChannel 004F  
                             __smallconst 1000                 _RB4_InterruptHandler_HIGH 0011  
                     ??_ADC_SelectChannel 0051                                  _ADC_Init 11AA  
               _RB7_InterruptHandler_HIGH 0005                               ADC_Init@ret 0051  
                _RB5_InterruptHandler_LOW 000B                                  _INT0_ISR 14F0  
                                _INT1_ISR 14EC                                  _INT2_ISR 14E8  
                                _RB4_Flag 003A                                  _RB5_Flag 0039  
         ADC_GetConversion_Interrupt@_adc 006A                                  _RB6_Flag 0038  
                                _RB7_Flag 0037                  __end_of_InterruptManager 02CE  
                                _PIE1bits 0F9D                 __end_of_ADC_SelectChannel 1392  
                                i2u200_45 118C                                  i2u210_40 13DC  
                                i2u210_41 13D8                                  i2u211_48 13E2  
                                i2u211_49 13F4                                  i2u230_40 0036  
                                i2u230_41 0032                                  i2u231_40 0048  
                                i2u231_41 0044                                  i2u240_40 00DA  
                                i2u232_40 0056                                  i2u240_41 00D6  
                                i2u232_41 0052                                  i2u241_40 00E8  
                                i2u233_40 0068                                  i2u241_41 00E4  
                                i2u233_41 0064                                  i2u250_40 0180  
                                i2u242_40 00F8                                  i2u234_40 0076  
                                i2u250_41 017C                                  i2u242_41 00F4  
                                i2u234_41 0072                                  i2u251_40 0198  
                                i2u243_40 0110                                  i2u235_40 0088  
                                i2u251_41 0194                                  i2u243_41 010C  
                                i2u235_41 0084                                  i2u260_40 022E  
                                i2u252_40 01A6                                  i2u244_40 011E  
                                i2u236_40 0096                                  i2u260_41 022A  
                                i2u252_41 01A2                                  i2u244_41 011A  
                                i2u236_41 0092                                  i2u261_40 023C  
                                i2u253_40 01B4                                  i2u245_40 012C  
                                i2u237_40 00A4                                  i2u229_40 0028  
                                i2u261_41 0238                                  i2u253_41 01B0  
                                i2u245_41 0128                                  i2u237_41 00A0  
                                i2u229_41 0024                                  i2u262_40 024C  
                                i2u254_40 01C4                                  i2u246_40 013C  
                                i2u238_40 00B4                                  i2u262_41 0248  
                                i2u254_41 01C0                                  i2u246_41 0138  
                                i2u238_41 00B0                                  i2u263_40 0264  
                                i2u255_40 01DC                                  i2u247_40 0154  
                                i2u239_40 00CC                                  i2u263_41 0260  
                                i2u255_41 01D8                                  i2u247_41 0150  
                                i2u239_41 00C8                                  i2u264_40 0272  
                                i2u256_40 01EA                                  i2u248_40 0162  
                                i2u264_41 026E                                  i2u256_41 01E6  
                                i2u248_41 015E                                  i2u265_40 0280  
                                i2u257_40 01F8                                  i2u249_40 0170  
                                i2u265_41 027C                                  i2u257_41 01F4  
                                i2u249_41 016C                                  _PIR1bits 0F9E  
                                i2u266_40 0290                                  i2u258_40 0208  
                                i2u266_41 028C                                  i2u258_41 0204  
                                i2u267_40 02A8                                  i2u259_40 0220  
                                i2u267_41 02A4                                  i2u259_41 021C  
                                i2u196_40 1106                                  i2u268_40 02B6  
                                i2u196_41 1102                                  i2u268_41 02B2  
                                i2u197_40 1116                                  i2u197_41 1112  
                                i2u198_40 1136                                  i2u198_41 1132  
                                i2u199_40 1174                                  i2u199_41 1170  
                       RB4_ISR@RB4_source 0042                                _ADCON0bits 0FC2  
                              _ADCON1bits 0FC1                                _ADCON2bits 0FC0  
                ADC_SelectChannel@channel 0050                               _INTCON2bits 0FF1  
                             _INTCON3bits 0FF0                                 copy_data0 12C4  
                               copy_data1 12E4                      _ecu_layer_initialize 14F4  
                              _EECON1bits 0FA6                                  __Hrparam 0000  
                                __Lrparam 0000                  ?_ADC_GetConversionResult 0042  
                                _adc_flag 0019                        __end_of_btn_values 1011  
                       RB6_ISR@RB6_source 0042                                  __ptext11 1454  
                                __ptext20 10F2                                  __ptext12 146E  
                                __ptext13 1488                                  __ptext14 14A2  
                                __ptext15 14E8                                  __ptext16 14EC  
                                __ptext17 14F0                                  __ptext18 13C8  
                                __ptext19 14BC           configure_voltage_reference@_adc 004C  
                   ?_ecu_layer_initialize 0042                                  isa$xinst 0000  
                                int$flags 0055                                _INTCONbits 0FF2  
                                intlevel2 0000               __end_of_ADC_StartConversion 1418  
         __end_of_ADC_GetConversionResult 11AA                            _port_registers 0060  
                  ??_ecu_layer_initialize 004C                             ??_Application 0052  
                       ?_InterruptManager 0042  
